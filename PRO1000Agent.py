import streamlit as st
import plotly.graph_objects as go

# ======== Khai b√°o chi ti·∫øt c√°c nh√≥m v√† ch·ªâ s·ªë ========

metrics = {
    "C√¥ng ngh·ªá": {
        "TCH": {
            "label": "S·∫µn s√†ng c√¥ng ngh·ªá (TCH)",
            "desc": "M·ª©c ƒë·ªô ch√≠n mu·ªìi h·∫° t·∫ßng CNTT, h·ªá th·ªëng ƒë·ªãnh danh s·ªë, Internet ph·ªß (%). Gi√° tr·ªã t·ª´ 0‚Äì100.",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 5
        },
        "COM": {
            "label": "T∆∞∆°ng th√≠ch h·ªá th·ªëng (COM)",
            "desc": "Kh·∫£ nƒÉng t√≠ch h·ª£p API v·ªõi c√¥ng an, b·∫£o hi·ªÉm, gara s·ª≠a ch·ªØa (%). Gi√° tr·ªã t·ª´ 0‚Äì100.",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 5
        },
        "DAV": {
            "label": "S·∫µn s√†ng d·ªØ li·ªáu (DAV)",
            "desc": "T·ª∑ l·ªá h·ªì s∆° xe ƒë√£ s·ªë h√≥a v√† c√≥ th·ªÉ truy v·∫•n realtime (%). Gi√° tr·ªã t·ª´ 0‚Äì100.",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 5
        },
        "SKL": {
            "label": "Nh√¢n l·ª±c blockchain (SKL)",
            "desc": "S·ªë l∆∞·ª£ng nh√¢n vi√™n n·ªôi b·ªô ho·∫∑c ƒë·ªãa ph∆∞∆°ng th√†nh th·∫°o blockchain (s·ªë ng∆∞·ªùi).",
            "type": "number",
            "min": 0,
            "max": 100,
            "step": 1
        }
    },
    "Ph√°p l√Ω & Ch√≠nh s√°ch": {
        "LSG": {
            "label": "Khung ph√°p l√Ω r√µ r√†ng (LSG)",
            "desc": "ƒê√£ c√≥ vƒÉn b·∫£n quy ƒë·ªãnh v·ªÅ h·ªì s∆° ƒëi·ªán t·ª≠, smart contract? (1=Ch∆∞a, 5=ƒê·∫ßy ƒë·ªß).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        },
        "DPR": {
            "label": "Quy·ªÅn ri√™ng t∆∞ & D·ªØ li·ªáu (DPR)",
            "desc": "Ch√≠nh s√°ch qu·ªëc gia v·ªÅ d·ªØ li·ªáu c√° nh√¢n v√† l∆∞u tr·ªØ ph√¢n t√°n (1=Ch∆∞a, 5=ƒê·ªß).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        },
        "LRR": {
            "label": "C√¥ng nh·∫≠n h·ªì s∆° blockchain (LRR)",
            "desc": "H·ªì s∆°/truy v·∫øt tr√™n blockchain c√≥ gi√° tr·ªã ph√°p l√Ω (1=Kh√¥ng, 5=C√≥).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        }
    },
    "T·ªï ch·ª©c": {
        "ORG": {
            "label": "NƒÉng l·ª±c t·ªï ch·ª©c (ORG)",
            "desc": "ƒê√£ c√≥ ƒë∆°n v·ªã e-governance ho·∫∑c nh√≥m R&D blockchain trong B·ªô GTVT? (1=Ch∆∞a, 5=ƒê·ªß).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        },
        "CHM": {
            "label": "Chuy·ªÉn ƒë·ªïi & ƒê√†o t·∫°o (CHM)",
            "desc": "K·∫ø ho·∫°ch ƒë√†o t·∫°o, m·ª©c ƒë·ªô t∆∞∆°ng t√°c c√°c b√™n li√™n quan (1=K√©m, 5=T·ªët).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        },
        "COL": {
            "label": "H·ª£p t√°c li√™n ng√†nh (COL)",
            "desc": "T·ª∑ l·ªá c∆° quan B·∫£o hi·ªÉm, Gara s·∫µn s√†ng t√≠ch h·ª£p (%) (0‚Äì100).",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 10
        }
    },
    "T√†i ch√≠nh": {
        "CAPEX": {
            "label": "Chi ph√≠ ƒë·∫ßu t∆∞ (CAPEX ‚Üì)",
            "desc": "T·ª∑ l·ªá v·ªën ƒë·∫ßu t∆∞ cho blockchain so v·ªõi ng√¢n s√°ch (%) (0‚Äì100). Th·∫•p h∆°n l√† t·ªët.",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 5
        },
        "OPEX": {
            "label": "Chi ph√≠ v·∫≠n h√†nh (OPEX ‚Üì)",
            "desc": "Chi ph√≠ h√†ng nƒÉm cho h·∫° t·∫ßng, gas (n·∫øu public chain) (%) so v·ªõi ng√¢n s√°ch. Th·∫•p h∆°n l√† t·ªët.",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 5
        },
        "CBR": {
            "label": "T·ª∑ su·∫•t L·ª£i √≠ch/Chi ph√≠ (CBR)",
            "desc": "T·ª∑ l·ªá ti·∫øt ki·ªám: chi ph√≠ ch·ªëng gian l·∫≠n, gi·∫£m th·ªß t·ª•c (%) so v·ªõi t·ªïng chi ph√≠. (0‚Äì200%).",
            "type": "slider",
            "min": 0,
            "max": 200,
            "step": 10
        }
    },
    "Ng∆∞·ªùi d√πng": {
        "TRU": {
            "label": "Ni·ªÅm tin & Ch·∫•p nh·∫≠n (TRU)",
            "desc": "M·ª©c ƒë·ªô tin t∆∞·ªüng h·ªá th·ªëng blockchain (Kh·∫£o s√°t %). (1‚Äì100).",
            "type": "slider",
            "min": 1,
            "max": 100,
            "step": 5
        },
        "IND": {
            "label": "H·ªó tr·ª£ doanh nghi·ªáp (IND)",
            "desc": "T·ª∑ l·ªá doanh nghi·ªáp t∆∞ nh√¢n/Gara/B·∫£o hi·ªÉm tham gia (%) (0‚Äì100).",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 10
        },
        "USAB": {
            "label": "Kh·∫£ nƒÉng s·ª≠ d·ª•ng (USAB)",
            "desc": "T·ª∑ l·ªá ng∆∞·ªùi d√πng ho√†n th√†nh t√°c v·ª• ch√≠nh m√† kh√¥ng c·∫ßn tr·ª£ gi√∫p (%) (0‚Äì100).",
            "type": "slider",
            "min": 0,
            "max": 100,
            "step": 10
        }
    },
    "Chi·∫øn l∆∞·ª£c & Ngo·∫°i c·∫£nh": {
        "POL": {
            "label": "H·ªó tr·ª£ ch√≠nh tr·ªã (POL)",
            "desc": "ƒê√£ n·∫±m trong Ch∆∞∆°ng tr√¨nh chuy·ªÉn ƒë·ªïi s·ªë qu·ªëc gia? (1=Ch∆∞a, 5=C√≥).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        },
        "GLB": {
            "label": "Xu h∆∞·ªõng & T∆∞∆°ng th√≠ch qu·ªëc t·∫ø (GLB)",
            "desc": "Kh·∫£ nƒÉng k·∫øt n·ªëi ti√™u chu·∫©n ASEAN/EU cho ƒë·ªãnh danh xe (1=Th·∫•p, 5=Cao).",
            "type": "slider",
            "min": 1,
            "max": 5,
            "step": 1
        }
    }
}

# ======== Kh·ªüi t·∫°o session state ========
if 'step' not in st.session_state:
    st.session_state.step = 0
    for grp in metrics.values():
        for key in grp:
            st.session_state[key] = grp[key]["min"]

# ======== C√°c h√†m ƒëi·ªÅu h∆∞·ªõng ========
def next_step():
    st.session_state.step += 1

def reset():
    st.session_state.step = 0
    for grp in metrics.values():
        for key in grp:
            st.session_state[key] = metrics[list(metrics.keys())[0]][key]["min"]

# ======== C·∫•u h√¨nh trang ========
st.set_page_config(page_title="ƒê√°nh gi√° kh·∫£ thi Blockchain GTVT", layout="wide")
st.title("üß† C√¥ng c·ª• ƒë√°nh gi√° kh·∫£ thi Blockchain cho GTVT ‚Äì Prototype")

# ======== Thanh Tr·∫°ng th√°i 7 b∆∞·ªõc ========
st.markdown("### üîÑ Ti·∫øn tr√¨nh ƒë√°nh gi√°:")
cols = st.columns(7)
status_labels = [
    "1Ô∏è‚É£ T√¨nh hu·ªëng", 
    "2Ô∏è‚É£ C√¥ng ngh·ªá", 
    "3Ô∏è‚É£ Ph√°p l√Ω", 
    "4Ô∏è‚É£ T·ªï ch·ª©c", 
    "5Ô∏è‚É£ T√†i ch√≠nh", 
    "6Ô∏è‚É£ Ng∆∞·ªùi d√πng", 
    "7Ô∏è‚É£ K·∫øt qu·∫£"
]
for idx, lbl in enumerate(status_labels):
    if idx == st.session_state.step:
        cols[idx].markdown(f"‚úÖ **{lbl}**")
    else:
        cols[idx].markdown(lbl)
st.divider()

# ======== B∆∞·ªõc 0: T√¨nh hu·ªëng v√† Th√¥ng tin ========
if st.session_state.step == 0:
    st.subheader("üìã B∆∞·ªõc 1: M√¥ t·∫£ tr∆∞·ªùng h·ª£p & th√¥ng tin c∆° b·∫£n")
    domain = st.selectbox("1. Ch·ªçn lƒ©nh v·ª±c GTVT:", 
                          ["Qu·∫£n l√Ω ƒëƒÉng ki·ªÉm", "V·∫≠n t·∫£i h√†ng h√≥a", "Logistics", 
                           "Qu·∫£n l√Ω d·ª± √°n h·∫° t·∫ßng", "Kh√°c"],
                          help="V√≠ d·ª•: V·∫≠n h√†nh h·ªá th·ªëng qu·∫£n l√Ω ƒëƒÉng ki·ªÉm li√™n b·ªô s·ª≠ d·ª•ng blockchain.")
    case_desc = st.text_area("2. M√¥ t·∫£ ng·∫Øn v·ªÅ t√¨nh hu·ªëng:", 
                             placeholder="VD: ·ª®ng d·ª•ng blockchain minh b·∫°ch l·ªãch s·ª≠ ƒëƒÉng ki·ªÉm xe...")
    org_name = st.text_input("3. T√™n c∆° quan/ƒë∆°n v·ªã li√™n quan:", 
                             placeholder="VD: C·ª•c ƒêƒÉng ki·ªÉm Vi·ªát Nam")
    if st.button("‚ñ∂Ô∏è Ti·∫øp t·ª•c", on_click=next_step, key="step0"):
        pass

# ======== C√°c b∆∞·ªõc ƒë√°nh gi√° chi ti·∫øt nh√≥m ch·ªâ s·ªë ========
elif 1 <= st.session_state.step <= 6:
    # X√°c ƒë·ªãnh nh√≥m v√† index
    idx = st.session_state.step - 1  # 1‚Üí nh√≥m 0
    group_name = list(metrics.keys())[idx]
    st.subheader(f"üîß B∆∞·ªõc {st.session_state.step+1}: ƒê√°nh gi√° nh√≥m \"{group_name}\"")

    # Hi·ªÉn th·ªã t·ª´ng ch·ªâ s·ªë trong nh√≥m
    for key, attr in metrics[group_name].items():
        st.write(f"‚Ä¢ **{attr['label']}**")
        st.caption(attr["desc"])
        if attr["type"] == "slider":
            st.slider("", attr["min"], attr["max"], value=st.session_state[key], 
                      step=attr["step"], key=key)
        else:
            st.number_input("", min_value=attr["min"], max_value=attr["max"], 
                            step=attr["step"], value=st.session_state[key], key=key)

    # N√∫t ‚ÄúTi·∫øp t·ª•c‚Äù ho·∫∑c ‚ÄúXem k·∫øt qu·∫£‚Äù
    if st.session_state.step < 6:
        if st.button("‚ñ∂Ô∏è Ti·∫øp t·ª•c", on_click=next_step, key=f"step{idx+1}"):
            pass
    else:
        if st.button("‚ñ∂Ô∏è Xem k·∫øt qu·∫£", on_click=next_step, key="final_step"):
            pass

# ======== B∆∞·ªõc 7: K·∫øt qu·∫£ & Bi·ªÉu ƒë·ªì ========
elif st.session_state.step == 7:
    st.subheader("üìä K·∫øt qu·∫£ ƒë√°nh gi√° kh·∫£ thi")
    # T√≠nh ƒëi·ªÉm trung b√¨nh t·ª´ng nh√≥m (quy v·ªÅ thang ƒëi·ªÉm 0-5)
    avg_scores = {}
    for grp_name, grp in metrics.items():
        total = 0
        n = len(grp)
        for key, attr in grp.items():
            raw = st.session_state[key]
            # N·∫øu c√≥ k√Ω hi·ªáu ‚Äú‚Üì‚Äù ‚Üí ƒë·ªô t·ªët t·ª∑ l·ªá ngh·ªãch v·ªõi gi√° tr·ªã
            if "‚Üì" in attr["label"]:
                val = attr["max"] + attr["min"] - raw
            else:
                val = raw
            # Quy v·ªÅ 0-5
            if attr["max"] > 5:
                total += (val / attr["max"]) * 5
            else:
                total += val
        avg_scores[grp_name] = round(total / n, 2)

    # Radar Chart hi·ªÉn th·ªã 6 nh√≥m
    radar = go.Figure()
    radar.add_trace(go.Scatterpolar(
        r=list(avg_scores.values()),
        theta=list(avg_scores.keys()),
        fill='toself',
        name='ƒêi·ªÉm trung b√¨nh'
    ))
    radar.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0, 5])),
        showlegend=False,
        title="Radar Chart: ƒêi·ªÉm trung b√¨nh c√°c nh√≥m y·∫øu t·ªë"
    )
    st.plotly_chart(radar, use_container_width=True)

    # Bar chart so s√°nh ch·ªâ s·ªë th·ª±c t·∫ø vs benchmark m·∫´u
    st.markdown("### üìà So s√°nh ch·ªâ s·ªë th·ª±c t·∫ø v·ªõi chu·∫©n tham chi·∫øu (m·∫´u)")
    benchmark_vals = {
        "TCH": 60, "COM": 60, "DAV": 50, "SKL": 10,
        "LSG": 4, "DPR": 4, "LRR": 4,
        "ORG": 3, "CHM": 3, "COL": 50,
        "CAPEX": 40, "OPEX": 30, "CBR": 100,
        "TRU": 70, "IND": 30, "USAB": 60,
        "POL": 3, "GLB": 3
    }

    for grp_name, grp in metrics.items():
        fig = go.Figure()
        for key, attr in grp.items():
            raw = st.session_state[key]
            bench = benchmark_vals.get(key, 0)
            if "‚Üì" in attr["label"]:
                actual = attr["max"] + attr["min"] - raw
                bench_val = attr["max"] + attr["min"] - bench
            else:
                actual = raw
                bench_val = bench
            # Quy v·ªÅ 0-5
            if attr["max"] > 5:
                actual = round((actual / attr["max"]) * 5, 2)
                bench_val = round((bench_val / attr["max"]) * 5, 2)
            fig.add_trace(go.Bar(
                name="Th·ª±c t·∫ø", x=[attr["label"]], y=[actual], marker_color='teal'
            ))
            fig.add_trace(go.Bar(
                name="Chu·∫©n m·∫´u", x=[attr["label"]], y=[bench_val], marker_color='orange'
            ))
        fig.update_layout(
            title=f"Nh√≥m: {grp_name}",
            barmode='group',
            yaxis=dict(title="ƒêi·ªÉm (0-5)", range=[0, 5])
        )
        st.plotly_chart(fig, use_container_width=True)

    # T·ªïng ƒëi·ªÉm chung v√† khuy·∫øn ngh·ªã
    overall = round(sum(avg_scores.values()), 2)
    max_possible = 5 * len(metrics)
    if overall >= max_possible * 0.8:
        level = "‚úÖ R·∫•t kh·∫£ thi"
    elif overall >= max_possible * 0.6:
        level = "üü° Kh·∫£ thi c√≥ ƒëi·ªÅu ki·ªán"
    else:
        level = "üî¥ Ch∆∞a kh·∫£ thi"

    st.markdown(f"## üèÜ M·ª©c ƒë·ªô kh·∫£ thi chung: **{level}** (T·ªïng = {overall}/{max_possible})")
    st.markdown("### üìå Khuy·∫øn ngh·ªã:")
    if st.session_state["LSG"] < 3:
        st.warning("- C·∫£i thi·ªán khung ph√°p l√Ω & ch√≠nh s√°ch li√™n quan h·ªì s∆° ƒëi·ªán t·ª≠, smart contract.")
    if st.session_state["SKL"] < 5:
        st.info("- ƒê√†o t·∫°o, tuy·ªÉn d·ª•ng th√™m chuy√™n gia blockchain.")
    if st.session_state["CAPEX"] > 50:
        st.info("- Xem x√©t blockchain m√£ ngu·ªìn m·ªü ƒë·ªÉ gi·∫£m chi ph√≠ ƒë·∫ßu t∆∞.")
    if st.session_state["TRU"] < 50:
        st.warning("- TƒÉng c∆∞·ªùng truy·ªÅn th√¥ng, n√¢ng cao nh·∫≠n th·ª©c c√¥ng ch√∫ng v·ªÅ blockchain.")

    if st.button("üîÑ ƒê√°nh gi√° l·∫°i", on_click=reset):
        pass
