
        Lecture 5 - Agenda
•        Agile Manifesto
•        Introduction to Scrum
•        Scrum framework
–        Roles
–        Ceremonies
–        Artifacts

•        The Agile Manifesto
•        Value 1:  Individuals and Interactions over Processes and Tools
•        Strong players: a must, but can fail if don’t work together.
•        Strong player:  not necessarily an ‘ace;’  work well with others! 
–        Communication and interacting is more important than raw talent.
•        ‘Right’ tools are vital to smooth functioning of a team.
•        Start small.  Find a free tool and use until you can demo you’ve outgrown it.  Don’t assume bigger is better.  Start with white board;  flat files before going to a huge database.
•        Building a team more important than building environment.  
–        Some managers build the environment and expect the team to fall together.  
–        Doesn’t work.  
–        Let the team build the environment on the basis of need.
•        Value 2:  Working Software over Comprehensive Documentation
•        Code – not ideal medium for communicating rationale and system structure.  
–        Team needs to produce human readable documents describing system and design decision rationale.
•        Too much documentation is worse than too little.
–        Take time;  more to keep in sync with code;  Not kept in sync? it is a lie and misleading.
•        Short rationale and structure document.
–        Keep this in sync;  Only highest level structure in system kept. 
–        Fatal flaw:  Pursue documentation instead of software:
•        Rule:  Produce no document unless need is immediate and significant.
•        Value 3:  Customer Collaboration over Contract Negotiation (1 of 2)
•        Not possible to describe software requirements up front and leave someone else to develop it within cost and on time.
•        Customers cannot just cite needs and go away
•        Successful projects require customer feedback on a regular and frequent basis – and not dependent upon a contract or SOW.
•        Value 3:  Customer Collaboration over Contract Negotiation (2 of 2)
•        Best contracts are NOT those specifying requirements, schedule and cost.  
–        Become meaningless shortly.
•        Far better are contracts that govern the way the development team and customer will work together. 
•        Key is intense collaboration with customer and a contract that governed collaboration rather than details of scope and schedule
–        Details ideally not specified in contract.  
–        Rather contracts could pay when a block (deliverable) passed customer’s acceptance tests. 
–        With frequent deliverables and feedback, acceptance tests never an issue.
•        Value 4:  Responding to Change over Following a Plan
•        Our plans and ability to respond to changes is critical!
•        Course of a project cannot be predicted far into future.
–        Too many variables;  not many good ways at estimating cost  
–        As developers gain knowledge of the system and as customer gains knowledge about their needs, some tasks will become unnecessary.
•        Better planning strategy: – make detailed plans for the next few weeks, very rough plans for the next few months, and extremely crude plans beyond that.
•        Need to know what we will be working on the next few weeks;  roughly for the next few months;  a vague idea what system will do after a year.
•        Only invest in a detailed plan for immediate tasks;  once plan is made, difficult to change due to momentum and commitment.
–        The lower resolution parts of the plan can be changed with relative ease.
•        Introduction to SCRUM
•        Scrum has been used by:
•        Scrum has been used for:
•        Commercial software
•        In-house development
•        Contract development
•        Fixed-price projects
•        Financial applications
•        ISO 9001-certified applications
•        Embedded systems
•        24x7 systems with 99.999% uptime requirements
•        How Scrum Works?
•        Sprints
•        Scrum projects make progress in a series of “sprints”
–        Analogous to Extreme Programming iterations
•        Typical duration is 2–4 weeks or a calendar month at most
•        A constant duration leads to a better rhythm
•        Product is designed, coded, and tested during the sprint

•        The sprint goal
•        A short statement of what the work will be focused on during the sprint
•        Sequential vs. overlapping development
•        No changes during a sprint
•        Plan sprint durations around how long you can commit to keeping change out of the sprint
•        Scrum framework
•        Scrum roles
•        Product owner
•        Define the features of the product
•        Decide on release date and content
•        Be responsible for the profitability of the product (ROI)
•        Prioritize features according to market value 
•        Adjust features and priority every iteration, as needed  
•        Accept or reject work results

•        Scrum Master
•        Represents management to the project
•        Responsible for enacting Scrum values and practices
•        Removes impediments 
•        Ensure that the team is fully functional and productive
•        Enable close cooperation across all roles and functions
•        Shield the team from external interferences
•        The team
•        Typically 5-9 people
•        Cross-functional:
•        Programmers, testers, user experience designers, etc.
•        Members should be full-time
•        May be exceptions (e.g., database administrator)
•        Teams are self-organizing
•        Ideally, no titles but rarely a possibility
•        Membership should change only between sprints

•        Scrum Practices

P01: Product Backlog and Prioritization ............................................................................................. 1 
P02: Sprint Plan meeting ..................................................................................................................... 1 
P03: Daily standup meeting ................................................................................................................ 1 
P04: Burn-down chart ......................................................................................................................... 2 
P05: Retrospective meeting ................................................................................................................. 2 
P06: Sprint review meeting ................................................................................................................. 2 
P07: Planning poker ............................................................................................................................ 2 
P08: Test first programming ................................................................................................................ 3 
P09: Pair programming ....................................................................................................................... 3 
P10: Collective ownership ................................................................................................................... 3 
P11: System metaphor: ........................................................................................................................ 3 
P12: Continuous integration ................................................................................................................ 4 
P13: Active stakeholder ....................................................................................................................... 4 
P14: Code standard .............................................................................................................................. 4 
P15: Burn down chart .......................................................................................................................... 4 
P16: Scrum master............................................................................................................................... 4 
P17: Product owner ............................................................................................................................. 5 
P18: Self organizing team ................................................................................................................... 5 
P19: User stories .................................................................................................................................. 6 
P20: Code refactoring .......................................................................................................................... 6 
P21: 100% coverage for unit tests ....................................................................................................... 6 
P22: User acceptance test .................................................................................................................... 6 

•        Scrum framework
•        Sprint planning
•        Decide how to achieve sprint goal (design)
•        Team selects items from the product backlog they can commit to completing
•        Create sprint backlog (tasks) from product backlog items (user stories / features)
•        Estimate sprint backlog in hours. Tasks is estimated (1-16 hours)
•        Collaboratively, not done alone by the ScrumMaster
•        The daily scrum ( Your version: Bi/weekly Scrum)
•        Daily, 15-minutes, stand-up
•        Not for problem solving
•        Moderated by a Scrum Master
•        Three questions:
•        What did you do yesterday?
•        What will you do today?
•        Is anything in your way?





•        The Sprint review meeting
(Our formal supervision meeting)
•        Team presents what it accomplished during the sprint
•        Typically takes the form of a demo of new features or underlying architecture
•        Informal
•        2-hour prep time rule
•        No slides
•        Whole team participates
•        Invite the world
•        Sprint retrospective meeting
•        Periodically take a look at what is and is not working
•        Typically 15–30 minutes
•        Done after every sprint
•        Whole team participates
•        Moderated by a Scrum Master
•        Each team member is asked to identify specific things that the team should:
–        Start doing
–        Stop doing
–        Continue doing

•        Exercise 1 – Retrospective meeting
•        Perform the retrospective within your team about what you have done so far
•        Each team member is asked to identify specific things that the team should:
–        Start doing
–        Stop doing
–        Continue doing
•        Make three slides:
•        Slide 1: List of what you are doing well
•        Slide 2: List of what you think you need to improve
•        Slide 3: List of what you will try in next Sprint

•        Scrum framework
•        Product backlog
•        List of user story (requirements)
•        A list of all desired work on the project
•        Ideally expressed such that each item has value to the users or customers of the product 
•        Prioritized by the product owner
•        Reprioritized at the start of each sprint
•        Breaking Down The Work:
•        User stories
•        An informal, natural language description of one or more features of a software system
•        Written from the perspective of an end user
•        A common pattern:
–        As a <role> I can/ want <capability>, so that <receive benefit>

•        Sprint backlog
•        Any team member can add, delete or change the sprint backlog
•        Stories from previous Sprint can be added to the current Sprint
•        Sprint backlog might include items that are not user stories:
•        Engineering-specific activities:
o        Testing the UX of the User Story ABC
•        Project management activities:
o        Creating a test plan
o        Meeting with customers

3.6 Way of working 
Software Engineering presents a vast amount of software development models, processes and practices. According to Jacobson, the author of Rational Unified Process, there is no one-size-fit-all when it comes to methods (Jacobson et al. 2019). A method needs to be adapted to the project situation, which is inherently evolving. Project teams need to constantly evolve their methods as long as there is work to do on the product. 
There are some other software development approaches worth mentioning, such as Waterfall life cycle, Spiral life cycle model, incremental software development, RAD life cycle model, that occur early in the history of software industry. In the last 20 years, methods such as Scrum and Disciplined Agile are among the most common approach for small software development 35 

team. Ken Schwaber and Jeff Sutherland are the ones who formulate the initial versions of the Scrum framework and to present Scrum as a formal process at the conference OOPSLA'95 (Sutherland et al. 1997). In 2001, a group of 17 software professionals (including Ken and Jeff) published the Manifesto for Agile Software Development4 that focus on four values: 
4 https://agilemanifesto.org/ 
5 https://www.scrumguides.org/scrum-guide.html#purpose 
• Individuals and interactions over processes and tools 
• Working software over comprehensive documentation 
• Customer collaboration over contract negotiation 
• Responding to change over following a plan 

Scrum is an Agile process that allows us to focus on delivering the highest business value in the shortest time. It allows us to rapidly and repeatedly inspect actual working software (every two to four weeks). The business sets the priorities. Teams self-organize to determine the best way to deliver the highest priority features. Every two weeks to a month anyone can see real working software and decide to release it as is or continue to enhance it for another sprint, as seen in Figure 10. 
Figure 10: A typical Sprint in a Scrum process (Scrum Guide) 
In subsections below, we present the list of Scrum practices that we think most relevant for the student project contexts. We present briefly the practice and students who are going to adopt them can find more instructive guideline in other sources. The full list of practices can be found in the Industrial guideline5. Tip 16: Students should have their own way of working by composing existing practices in the way works best for their project situation. 
3.6.1 Product Backlog and Prioritization 
A list of everything that needs to be done to the product, listed in priority order. The sprint backlog is a list of tasks identified by the Scrum team to be completed during the Scrum sprint.
3.6.2 User stories 
User stories are short, simple descriptions of a feature told from the perspective of the person who desires the new capability, usually a user or customer of the system. They typically follow a simple template: As a < type of user >, I want < some goal > so that < some reason >. 
3.6.7 Planning poker 
Planning Poker6 is a common approach to estimate the size of items in product backlogs. Planning Poker can be used with story points, working hours, or any other estimating unit. To start a poker planning session, the product owner or customer reads an agile user story or describes a feature to the estimators. Each estimator is holding a deck of Planning Poker cards with values like 0, 1, 2, 3, 5, 8, 13, 20, 40 and 100, which is the sequence we recommend. The values represent the number of story points, ideal days, or other units in which the team estimates. The estimators discuss the feature, asking questions of the product owner as needed. When the feature has been fully discussed, each estimator privately selects one card to represent his or her estimate. All cards are then revealed at the same time. If all estimators selected the same value, that becomes the estimate. If not, the estimators discuss their estimates. The high and low estimators should especially share their reasons. After further discussion, each estimator reselects an estimate card, and all cards are again revealed at the same time. The poker planning process is repeated until consensus is achieved or until the estimators decide that agile estimating and planning of a particular item needs to be deferred until additional information can be acquired. Students should learn to use Planning poker for every Sprint. However, it is noticed that for novices, project estimates could be over-optimistic and planning poker additionally increased the over-optimism (Mahnič & Hovelja 2012). 
6 https://en.wikipedia.org/wiki/Planning_poker 
7 https://en.wikipedia.org/wiki/Acceptance_testing 
3.6.8 Code standard 
If programmers all adhere to a single agile coding standard (including everything from tabs vs. spaces and curly bracket placement to naming conventions for things like classes, methods, and interfaces), everything just works better. It’s easier to maintain and extend code, to refactor it, and to reconcile integration conflicts, if a common standard is applied consistently throughout. 
3.6.9 100% coverage for unit tests 
Unit tests are released into the code repository along with the code they test. Code without tests may not be released. A program with high test coverage, measured as a percentage, has had more of its source code executed during testing which suggests it has a lower chance of containing undetected software bugs compared to a program with low test coverage 
3.6.10 User acceptance test 
Acceptance tests7 are created from user stories. The customer specifies scenarios to test when a user story has been correctly implemented. A story can have one or many acceptance tests, whatever it takes to ensure the functionality works. 
Acceptance tests are black box system tests. Each acceptance test represents some expected result from the system. Customers are responsible for verifying the correctness of the acceptance tests and reviewing test scores to decide which failed tests are of highest priority. Acceptance tests are also used as regression tests prior to a production release. 
A user story is not considered complete until it has passed its acceptance tests. This means that new acceptance tests must be created each iteration, or the development team will report zero progress. 38 

3.6.11 Burn-down chart 
Early detection of issues is always better than late detection. This can be done as long as progress is tracked. The daily burndown chart8 is a simple practice that helps the team track daily progress. Scrum methodology uses the burndown chart to see the progress on completed and pending tasks. 
3.6.12 Pair programming 
Pair programming9 is a common adopted Agile technique in which two programmers work together at one workstation. One, the driver, writes code while the other, the observer or navigator, reviews each line of code as it is typed in. The two programmers switch roles frequently. 
3.6.13 Test driven development 
Test driven development (TDD)10 starts by writing a test for a user story or a feature. The first step is to quickly add a test, basically just enough code to fail. Next you run your tests, often the complete test suite although for sake of speed you may decide to run only a subset, to ensure that the new test does in fact fail. You then update your functional code to make it pass the new tests. The fourth step is to run your tests again. If they fail, you need to update your functional code and retest. Once the tests pass the next step is to start over. 
3.6.14 Scrum master 
Development process and practices facilitated by a dedicated role. The Scrum Master11 is responsible for making sure a Scrum team lives by the values and practices of Scrum. The Scrum Master is often considered a coach for the team, helping the team do the best work it possibly can. The Scrum Master can also be thought of as a process owner for the team, creating a balance with the project's key stakeholder, who is referred to as the product owner. 
The Scrum Master does anything possible to help the team perform at their highest level. This involves removing any impediments to progress, facilitating meetings, and doing things like working with the product owner to make sure the product backlog is in good shape and ready for the next sprint. The Scrum Master role is commonly filled by a former project manager or a technical team leader but can be anyone. 
The Scrum Master is also often viewed as a protector of the team. The most common example is that the Scrum Master protects the team by making sure they do not over-commit themselves to what they can achieve during a sprint due to pressure from an overly aggressive product owner. However, a good Scrum Master also protects the team from complacency. 
3.6.15 Product owner 
The Product owner12 is typically a project's key stakeholder. Part of the product owner responsibilities is to have a vision of what he or she wishes to build and convey that vision to the scrum team. This is key to successfully starting any agile software development project.
8 https://en.wikipedia.org/wiki/Burn_down_chart 
9 https://en.wikipedia.org/wiki/Pair_programming 
10 https://en.wikipedia.org/wiki/Test-driven_development 
11 https://www.scrum.org/resources/what-is-a-scrum-master 
12 https://www.scrum.org/resources/what-is-a-product-owner  
The agile product owner does this in part through the product backlog, which is a prioritized features list for the product. 
The product owner is commonly a lead user of the system or someone from marketing, product management or anyone with a solid understanding of users, the marketplace, the competition and of future trends for the domain or type of system being developed. 

