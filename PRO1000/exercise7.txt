Project Description: GreenCode Initiative Website
The goal of this project is to design and develop a website that promotes sustainable programming practices (Green Software Development). The website will serve as an educational and inspirational platform for building energy-efficient, environmentally friendly, and socially responsible software systems.
Potential Stakeholders:
Primary Users: Software developers interested in sustainable coding practices.
Secondary Users: Students and teachers in computer science using the platform as a learning tool.
Additional Stakeholders: Startups, tech companies, sustainability advocates, and environmental researchers exploring eco-friendly technology.
Possible Customers:
Tech companies and software development firms seeking premium tools and certifications.
Educational institutions subscribing for specialized content.
Sustainability organizations and NGOs funding advanced tools or initiatives.
Suggested Website Structure
Home Page
Mission and importance of sustainable programming.
Quick links to website sections.
About Green Programming
Educational blogs on topics like efficient algorithms, optimized code, and sustainable web design.
Sustainable Practices Toolkit
Tools, frameworks, and checklists for green programming (e.g., Green Web Foundation, CodeCarbon).
Case Study
Real-world example of adopting green coding practices.
Contact Page
Contact form and FAQ section.
Deliverables
Functional website raising awareness about sustainable programming.
Research and content creation on sustainable practices.
Case study transcript.
Responsive design with interactive prototypes in Figma.
Final implementation in Wix, WordPress, or HTML/CSS/JavaScript. Backend is optional but encouraged.

Timeline Start: January 2025. End: April 2024

Evaluation Criteria
Visual Appeal: Design is sustainable, engaging, and consistent with the green theme.
Functionality: Web pages are accessible and functional.
Content: All required content is present and well-organized.
Quality: Tested with usability and system tests.

Exercise 7 - Requirement elicitation. Basing on the project description, identify and describe requirements by natural language. Evaluate your identified requirements if they are (1) clear, (2) consistent, (3) unambiguous, and (4) verifiable. If the requirements are not good enough, create a list of questions to elicit to improve the requirements.

Act as a lecturer in a software project management course. Evaluate the students' answer to the Exercise 7. Evaluation criteria are: the completeness of the identified requirements, the complteness and quality of the requirement evaluation according to clearness, consistency, unambiguousity and verifiability.

First of all, write one sentence to introduce the feedback purpose and, the connection of doing this exercise to the course module - Scope Management. 

Secondly, in the next paragraph, evaluate the answers and give the associating evaluation level. Four levels of evaluation are Level 1 - Unsastifactory, Level 2 - Needs Improvement, Level 3 - Satisfactory and Level 4 - Excellence. 

Completely Out of Topic: the student writes something unrelated to the exercise, asks questions, or provides irrelevant information. Level 1
Partial Answer: The student identifies some requirements but does not evaluate them for clearness, consistency, unambiguity, or verifiability. Level 2
General and Superficial Answer: The student provides vague or generic requirements (e.g., "The website must work well") without specific descriptions tied to the project. Level 2
Misunderstanding the Task: The student misinterprets the task, such as focusing on technical implementation details instead of identifying and evaluating requirements. Level 2
Incomplete Evaluation of Requirements: The student identifies requirements but fails to thoroughly evaluate them against the four criteria (clearness, consistency, unambiguousness, and verifiability). Level 2
Unrealistic or Unverifiable Requirements: The student provides requirements that are either infeasible or cannot be verified (e.g., "The website must be the best in the market"). Level 2
Well-Structured but Incomplete Answer: The student provides a logical structure but omits minor requirements or parts of the evaluation process. Level 3
Excellent but Slightly Unbalanced Answer: The student provides strong requirements and evaluations but gives uneven attention to certain evaluation criteria or requirements. Level 3
Excellent and Comprehensive Answer: The student identifies all relevant requirements clearly and evaluates them thoroughly against the four criteria, providing actionable suggestions for improvement where necessary. Level 4

Thirdly briefly summarize the strengths and weaknesses of the answer. Quote one good_sentence to illustrate for the strength and put it inside this template :green[good_sentence]. Quote one bad_sentence to illustrate for the weaknesses and put it inside this template :red[bad_sentence]. Note that only giving quotes if the good_sentence or bad_sentence can be found within the student answer.

Fourthly, a headline Action points and then followed bullet points at most three actionable points to address the given feedback. 

Finally, basing on the current evaluation level of this student and what they should do, write a simple question or motivating sentence to encourage the student start with fixing the feedback. 
