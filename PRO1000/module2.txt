•        Omfangsstyring
•        Omfang refererer til alt arbeidet som er involvert i å lage produktene til prosjektet og prosessene som brukes for å lage dem
•        Omfangsstyring
Omfangsstyring refererer til prosessene som er involvert i å definere, kontrollere og validere prosjektets omfang. Seks hovedtrinns:
•        Planlegging av et prosjektomfang
•        Samlekrav
•        Definere omfang
•        Opprette WBS
•        Validerer omfang
•        Kontrollerende omfang

•        1. Planlegging av et prosjektomfang
•        Prosjektets formål og mål: Formålet definerer hvorfor prosjektet gjennomføres. Målene fastsetter hva som skal oppnås.
•        Identifisering av interessenter og deres forventninger: Dette inkluderer både interne og eksterne interessenter som kan bli påvirket av prosjektets resultater. 
•        Prosjektskisse: gir en overordnet beskrivelse av prosjektets omfang, mål, ressurser og tidsramme
•        Fastsettelse av prosjektets begrensninger og betingelser: Identifikasjon og dokumentasjon av prosjektets begrensninger og betingelser er avgjørende for å unngå overambisiøse forventninger og urealistiske mål. Dette inkluderer faktorer som budsjettrestriksjoner, tidsrammer, ressurstilgjengelighet og teknologiske begrensninger
•        Etablering av suksesskriterier: kvantifiserbare målene og resultatene som indikerer om prosjektet har oppnådd sine mål. Disse kriteriene tjener som en metode for å vurdere prosjektsuksessen. De kan omfatte aspekter som kostnadsstyring, kvalitetsstandarder, leveringsdatoer og kundetilfredshet

•        1. Planlegging av et prosjektomfang - Prosjektskisse
Prosjektskisse: Implementering av et Nytt Kundeservicesystem
Prosjektets omfang: Dette prosjektet har som mål å implementere et nytt kundeservicesystem for å forbedre vår kundesupporttjeneste. Omfanget inkluderer utviklingen av programvare, opplæring av ansatte, overføring av eksisterende data, og etablering av kundesupportprosesser og retningslinjer for å forbedre responstider og kundetilfredshet. Prosjektet inkluderer også integrering av systemet med eksisterende datasystemer.
Prosjektmål
•        Redusere kundesvartid med 25% innen seks måneder etter implementering.
•        Øke kundetilfredshetsscoren med minst 15 poeng innen ett år.
•        Implementere kundeservicesystemet innenfor den tildelte budsjettgrensen på 500 000 kroner.
•        Trene alle kundesupportansatte innen to måneder etter systemets implementering.
Interessenter:
•        Kundesupportteamet og ledelse
•        IT-avdelingen for systemimplementering
•        Kunder og brukere av kundesupporttjenester
•        Leverandører av programvare og teknologi
•        Prosjekteiere og toppledels
•        1. Planlegging av et prosjektomfang - suksesskriteriene
•        Redusere kundesvartid med 25% innen seks måneder etter implementering: Dette suksesskriteriet måler effektiviteten av det nye kundeservicesystemet ved å evaluere hvor raskt kundesupportteamet kan svare på henvendelser. Målet er å redusere svartiden med 25% fra det tidligere nivået.
•        Øke kundetilfredshetsscoren med minst 15 poeng innen ett år: Dette suksesskriteriet fokuserer på kundenes opplevelse og tilfredshet. Målet er å øke kundetilfredshetsscoren med minst 15 poeng fra utgangspunktet innen ett år etter implementeringen av det nye systemet.
•        Implementere kundeservicesystemet innenfor den tildelte budsjettgrensen på 500 000 kroner: Dette suksesskriteriet vurderer prosjektkostnadene. Målet er å sikre at implementeringen utføres innenfor den fastsatte budsjettgrensen på 500 000 kroner.
•        Trene alle kundesupportansatte innen to måneder etter systemets implementering: Dette suksesskriteriet måler opplæringsprosessen og forberedelsen av kundesupportteamet for å bruke det nye systemet. Målet er å fullføre opplæringen av alle ansatte innen to måneder etter systemets implementering.
•        2. Samlekrav
•        Et krav er en spesifikk forventning, nødvendighet, spesifikasjon eller betingelse som må oppfylles for at et produkt, system eller tjeneste skal være akseptabelt og tilfredsstille de ønskede behovene. Krav er grunnleggende i enhver form for ingeniørarbeid, produktutvikling, prosjektledelse og programvaredesign. De hjelper med å definere funksjonaliteten, ytelsen og kvaliteten som forventes fra det som blir utviklet. Krav kan variere i natur og omfang og kan inkludere:
–        Funksjonelle krav: Dette beskriver hva systemet skal gjøre eller utføre. For eksempel, et funksjonelt krav for et nettbankprogram kan være "systemet må tillate brukere å overføre penger mellom kontoer.«
–        Ikke-funksjonelle krav: Dette beskriver kvaliteten, ytelsen eller begrensningene som systemet må oppfylle. Dette kan inkludere krav som pålitelighet, sikkerhet, ytelse, brukervennlighet, og mer. Et eksempel på et ikke-funksjonelt krav er "systemet må være i stand til å håndtere 1000 samtidige brukere uten tregere ytelse."


•        2. Samlekrav – Requirement Engineering
•        Requirement Engineering (RE) er en disiplin innen systemutvikling og prosjektledelse som fokuserer på å identifisere, analysere, dokumentere og administrere kravene som er nødvendige for å utvikle et produkt, system eller programvare
–        Kravsamlet: Dette trinnet innebærer å forstå og identifisere alle nødvendige krav fra ulike kilder, inkludert kunder, brukere, interessenter og eksisterende dokumentasjon. Kravene kan være funksjonelle (hva systemet skal gjøre), ikke-funksjonelle (kvalitetskrav som ytelse, sikkerhet og brukervennlighet) eller tekniske (tekniske spesifikasjoner).
–        Kravanalyse: Etter å ha samlet kravene, må de analyseres for å sikre at de er klare, konsistente, realistiske og oppnåelige. Analysen hjelper til med å forstå kravenes innbyrdes avhengighet og påvirke og kan innebære bruk av teknikker som kravmodellering, prototyping og simuleringsverktøy.
–        Kravsdokumentasjon: Kravene må dokumenteres på en strukturert måte, vanligvis i et kravsdokument, som gir en klar og detaljert beskrivelse av hvert krav. Dokumentasjonen kan inkludere kravbeskrivelser, prioriteringer, målbare suksesskriterier og eventuelle spesifikasjoner som er nødvendige.
–        Kravsgodkjenning: Etter at kravene er dokumentert, må de bli godkjent av relevante interessenter, inkludert kunden og prosjekteiere. Dette sikrer enighet om prosjektets mål og omfang.
–        Kravshåndtering og endringskontroll: Gjennom hele prosjektløpet kan kravene endres som følge av endringer i forretningskrav, teknologi eller brukerbehov. Requirement Engineering innebærer å håndtere endringer og sørge for at de nødvendige tilpasninger blir gjort uten å påvirke prosjektkvaliteten eller tidsrammen negativt.
–        Kravstruktur og sporbarhet: Kravene kan organiseres i en struktur som hjelper med å spore deres avhengighet og forhold til hverandre. Dette gir en oversikt over hvordan kravene oppfyller prosjektmålene og hjelper med endringshåndtering.
•        2. Samlekrav - Kvaliteten på kravene 
•        Kvaliteten på kravene er av avgjørende betydning for suksessen til ethvert prosjekt eller produktutviklingsinitiativ. Godt definerte og høykvalitetskrav legger grunnlaget for å oppnå prosjektmålene, sikrer effektiv kommunikasjon mellom teammedlemmer og interessenter, og reduserer risikoen for misforståelser og kostbare endringer senere i prosjektet. Her er noen viktige aspekter ved kvaliteten på kravene:
–        Klare og forståelige: Kvalitetskrav bør være klare, enkle og forståelige for alle interessenter. De skal unngå unødig teknisk terminologi og være formulert på en måte som alle involverte kan tolke ensartet.
–        Konsistente og sammenhengende: Kravene skal være konsistente med hverandre og med prosjektmålene. Eventuell uoverensstemmelse mellom krav kan føre til forvirring og konflikt.
–        Riktighet (Correctness): Riktighet refererer til at kravene er faktisk korrekte og nøyaktige. Riktige krav sørger for at de er i tråd med virkelige forhold og at de oppfyller de faktiske behovene til prosjektet eller produktet. Riktige krav unngår feil og misforståelser som kan føre til kostbare feil og problemer senere i prosjektet.
–        Entydighet (Unambiguity): Entydighet handler om å sørge for at kravene er uttrykt på en måte som ikke gir rom for tolkningsfeil eller tvetydighet. Entydige krav unngår språklige tvetydigheter og sikrer at det er enighet om hva som er forventet. Entydige krav bidrar til å redusere risikoen for misforståelser og konflikter mellom teammedlemmer og interessenter.
–        Målbare: Kravene skal være spesifikke og målbare, noe som betyr at de skal gi kvantitative mål som kan brukes for testing og verifikasjon
–        Testbare og verifiserbare: Kvalitetskrav skal være testbare, slik at de kan bekreftes gjennom testing og evaluering. Dette bidrar til å sikre at prosjektet oppfyller kravene og forventningene til interessenter.
2. Samlekrav - Brukerhistorier
•        Brukerhistorier (user stories) er en teknikk som brukes i smidig programvareutvikling for å beskrive kravene til et system fra sluttbrukerens perspektiv. Brukerhistoriene er vanligvis skrevet i en fortellende form og følger et spesifikt format som beskriver hvem, hva og hvorfor. Format:
•        As a < type of user >, I want < some goal > so that < some reason >
•        Brukerhistoriene suppleres ofte med akseptansekriterier, som er detaljerte beskrivelser av hva som skal være oppfylt for at brukerhistorien skal betraktes som fullført. Dette gir tydelige retningslinjer for testing og validering.
•        2. Samlekrav - Brukerhistorier
•        Som en bruker, vil jeg kunne opprette en konto på e-læringsplattformen for å få tilgang til kursmateriale og funksjoner.
•        Som en instruktør, vil jeg kunne opprette nye kurs med beskrivelser og læringsmål.
•        Som en student, vil jeg kunne laste opp og levere oppgaver som en del av kurset.
•        Som en student, vil jeg kunne få tilgang til interaktive lærematerialer som videoer, quizzer og øvingsoppgaver.
•        Som en bruker, vil jeg være sikker på at mine personlige data og resultater er beskyttet gjennom passende sikkerhetsmekanismer.
•        Som en bruker, forventer jeg at plattformen skal laste kursmateriale raskt, med en sideindlastningstid på mindre enn 2 sekunder.
•        Som en administrator, forventer jeg at plattformen skal kunne håndtere samtidig tilgang for minst 1 000 brukere uten tregere ytelse.
•        Som en bruker med funksjonsnedsettelser, forventer jeg at plattformen skal være WCAG 2.0 AA-kompatibel for å sikre universell tilgjengelighet.
•        Som en administrator, forventer jeg at all brukerinformasjon og data skal lagres og overføres kryptert i samsvar med bransjestandarder for datasikkerhet.
•        Som en systemadministrator, forventer jeg at plattformen skal kunne håndtere økende datamengder og brukere ved å skalere horisontalt og vertikalt etter behov.
•        2. Samlekrav - Metoder for kravinnsamling
•        Intervjuer: Intervjuer med interessenter, brukere, eksperter og andre relevante parter er en av de mest direkte metodene for kravinnsamling. Dette gir muligheten til å stille spesifikke spørsmål og få detaljert innsikt i kravene.
•        Workshops og møter: Å organisere kravsamlingssesjoner, workshops og møter med interessenter og teammedlemmer kan hjelpe til med å samle krav gjennom diskusjon og samarbeid. Brainstorming og diskusjoner kan avdekke nye perspektiver og krav.
•        Spørreundersøkelser: Bruk av skriftlige spørreskjemaer og spørreundersøkelser kan være nyttig for å samle inn kvantitative data og meninger fra et bredt spekter av interessenter.
•        Observasjon: Observasjon av eksisterende prosesser, brukeratferd og systeminteraksjoner kan gi verdifull innsikt i hva som er nødvendig for å forbedre eller utvikle et produkt eller system.
•        Prototyping: Utvikling av prototyper eller mock-ups av systemet kan hjelpe interessenter med å visualisere og klarlegge kravene. Prototyping er spesielt nyttig for å samle inn krav knyttet til brukergrensesnitt og interaksjonsdesign.
•        Benchmarking: Sammenligning av lignende produkter, systemer eller tjenester på markedet kan hjelpe med å identifisere bransjestandarder og beste praksis, som deretter kan omdannes til krav.
•        Dokumentanalyse: Gjennomgang av eksisterende dokumenter, som kontrakter, retningslinjer og regelverk, kan avdekke eksplisitte og implisitte krav.
•        3. Definere omfang
•        Prosjektskisse kontra prosjektomfang
•        Utvikling av en omfangsbeskrivelse
•        Opprettelse av en omfangsvedlegg som inkluderer detaljert beskrivelse av alle leveranser
•        Krav for godkjenning av omfang
•        4. Work breakdown structure (WBS)
•        En hierarkisk dekomponering av det leverte arbeidet som trengs for å fullføre et prosjekt. Den deler opp leveransene i håndterbare arbeidspakker som kan planlegges og har kostnader og ressurser tildelt dem
•        WBS inkluderer 100 % av arbeidet definert av prosjektets omfang og fanger opp alle leveranser – interne, eksterne, interim – når det gjelder arbeidet som skal fullføres, inkludert prosjektledelse
•        4. Work breakdown structure (WBS) – Hvorfor?
•        Dekomponering av prosjektet: En WBS deler prosjektet ned i mindre, mer håndterbare deler eller arbeidspakker. Dette gjør prosjektet mer overkommelig og gir klarhet om hva som må gjøres for å oppnå prosjektmålene.
•        Strukturering av arbeid: WBS gir en hierarkisk struktur som viser hvordan arbeidet er organisert og relatert. Dette hjelper prosjektteamet og interessentene med å forstå hvordan ulike deler av prosjektet bidrar til å oppnå prosjektmålene.
•        Ressursallokering: Med WBS kan du tydelig se hvilke ressurser som kreves for hver arbeidspakke. Dette hjelper med å planlegge ressursallokeringen og fordele ansvar i prosjektet.
•        Tidsplanlegging: WBS gir grunnlaget for å utvikle en prosjekttidsplan. Ved å kjenne omfanget av arbeidet i hver arbeidspakke, kan du estimere tidsrammer og definere avhengigheter mellom oppgaver.
•        Kostnadsstyring: En WBS gir en struktur som kan brukes for kostnadsestimater og budsjettallokering. Du kan estimere kostnader for hver arbeidspakke og summe dem for å få en oversikt over prosjektkostnadene.
•        Kommunikasjon: WBS er et kraftig verktøy for kommunikasjon mellom prosjektteamet og interessenter. Det gir et felles rammeverk for å diskutere og vurdere prosjektets omfang og arbeidspakker.
•        Risikohåndtering: WBS kan bidra til å identifisere potensielle risikoer og usikkerheter i prosjektet. Ved å bryte ned prosjektet i mindre deler, kan du vurdere risikoen for hver arbeidspakke og utvikle risikoreduserende strategier.
•        Overvåking og kontroll: En WBS gir et strukturert rammeverk for overvåking og kontroll av prosjektets fremdrift. Du kan spore fremdrift for hver arbeidspakke og identifisere avvik fra planen.
•        4. Work breakdown structure (WBS) – Regler av en WBS
•        Enhetlig struktur: WBS skal følge en enhetlig struktur der alle elementene i hierarkiet har samme nivå av detaljer. Dette gjør det enklere å forstå og organisere arbeidet.
•        Ingen overlappende arbeidspakker: Det bør ikke være overlapp eller duplicering av arbeid mellom arbeidspakkene. Hver arbeidspakke skal ha en klar og unik rolle i prosjektet.
•        Ingen hull: Det skal heller ikke være hull i WBS. Det vil si at alle aspekter av prosjektet bør dekkes, og ingenting skal utelates.
•        Dekker hele prosjektet: WBS skal dekke hele prosjektet fra start til slutt. Det skal inkludere alle aktiviteter, leveranser og oppgaver som er nødvendige for å oppnå prosjektmålene.
•        Logisk struktur: WBS skal ha en logisk og hierarkisk struktur der elementene bygger på hverandre. Øverste nivå representerer prosjektets hovedmål, mens de lavere nivåene gir mer detaljerte beskrivelser.
•        Mutasjonen skal være klare: Hver arbeidspakke skal være tilstrekkelig klar og forståelig, slik at det er tydelig hva som kreves for å fullføre den.
•        Nummerering: En vanlig praksis er å nummerere elementene i WBS for å vise hierarki og organisering. For eksempel kan øverste nivå være "1", de neste nivåene kan være "1.1", "1.2", "1.3", og så videre.
•        Endringskontroll: WBS kan bli endret i løpet av prosjektet for å reflektere endringer i prosjektet. Enhver endring i WBS bør være underlagt en nøye kontrollprosess.
•        4. WBS - UTVIKLINGSMETODE
•        Top-Down-metoden: Dette er den mest vanlige tilnærmingen til å utvikle en WBS. Du begynner med å identifisere de høyeste nivåene av prosjektet, vanligvis prosjektmål eller hovedoppgaver, og deretter bryter du dem gradvis ned i mindre deler på lavere nivåer. Dette gir en naturlig hierarkisk struktur.
•        Bottom-Up-metoden: I motsetning til top-down-metoden, begynner du med mindre arbeidsenheter og bygger oppover. Dette kan være nyttig når du har detaljerte kunnskaper om de mindre elementene i prosjektet, og du vil se hvordan de passer inn i de større målene.
•        Mind Mapping: Mind mapping er en kreativ tilnærming som lar deg brainstorme og visualisere strukturen til WBS. Du starter med en sentral idé (prosjektmålet) og oppretter grener som representerer hovedkomponenter, og deretter ytterligere grener for å bryte dem ned i mindre oppgaver og arbeidspakker.
•        Organisasjonens standardstruktur: Noen organisasjoner har etablerte standard WBS-strukturer som kan brukes som utgangspunkt. Dette er spesielt nyttig i bransjer der prosjekter har lignende strukturer og krav.
•        Analogimetoden: Denne metoden innebærer å se på WBS-er fra tidligere prosjekter som ligner på det gjeldende prosjektet og tilpasse dem til de nye behovene. Det er en effektiv måte å dra nytte av tidligere erfaringer.
•        Ekspertvurdering: Involvering av erfarne eksperter fra bransjen eller prosjektteamet i utviklingen av WBS kan være svært nyttig. De kan bidra til å identifisere de riktige nivåene av arbeidsbryting og riktig struktur.
•        Workshop-metoden: Å organisere en arbeidsverkstedssesjon med nøkkelinteressenter og teammedlemmer kan være en effektiv måte å samle inn innsikt og utvikle WBS. Diskusjon og samarbeid kan bidra til å oppnå en felles forståelse av prosjektstrukturen.
•        Automatiserte verktøy: Det er spesialiserte programvareverktøy tilgjengelige som kan hjelpe med å generere og administrere WBS-er. Disse verktøyene kan være nyttige for komplekse prosjekter med mange arbeidspakker.
•        4. WBS av artifacts eller aktiviteter
•        En Work Breakdown Structure (WBS) kan organiseres av enten artefakter eller aktiviteter, avhengig av det spesifikke prosjektet og prosjektledelsestilnærmingen som brukes. Valget av hvordan WBS skal struktureres avhenger ofte av prosjektets kompleksitet, og preferansene til prosjektgruppen.
•        WBS av Artifacts:
–        Når WBS er organisert etter artefakter, bryter den ned prosjektet i leveranser eller sluttprodukter. Hver større leveranse eller artefakt er delt inn i mindre komponenter, og dette hierarkiet kan fortsette til prosjektet er brutt ned i de minste arbeidspakkene. Denne tilnærmingen brukes ofte i prosjekter hvor fokus er på sluttproduktene eller resultatene.
–        For eksempel, i et byggeprosjekt, kan WBS starte med de viktigste leveransene som «Bygningsstruktur», «Elektrisk system», «VVS-system» og «Landskapsarbeid». Hver av disse leveransene er videre brutt ned i delleveranser, og så videre.
•        WBS av aktiviteter:
–        Når WBS er organisert etter aktiviteter, fokuserer den på å dele opp prosjektet i oppgavene, aktivitetene eller arbeidspakkene som må utføres for å fullføre prosjektet. Denne tilnærmingen brukes ofte i prosjekter hvor det legges vekt på å styre og spore arbeidet som må gjøres fremfor sluttproduktene.
–        For eksempel, i et programvareutviklingsprosjekt, kan WBS starte med aktiviteter som «Requirements Gathering», «Design», «Coding», «Testing» og «Documentation». Hver av disse aktivitetene kan videre deles inn i delaktiviteter og arbeidspakker.
•        4. WBS av artifacts
•        4. WBS av aktiviteter
•        5. Validerer omfang
•        Betydningen av omfangsvalidering
•        Metoder for å validere omfang, som gjennomgang av omfangsdokumentasjon og prototyping
•        Rolle og ansvar for interessenter i valideringsprosessen
•        Godkjennelseskriterier for omfangsvalidering
 
•        5. Validerer omfang
•        6. Kontrolerer Omfang
•        Overvåke og styre endringer i prosjektets omfang for å opprettholde prosjektleveransen i tråd med planen.
–        Etablere en Baseline
–        Overvåke Omfangsendringer
–        Endringskontrollprosess
–        Vurdering av Endringens Konsekvense
–        Kommunikasjon med Interessenter
–        Godkjennelse av Endringer
–        Oppdatere Omfangsbeskrivelse
•        6. Kontrolerer Omfang - Scope Creep
Omfangskryp: endringer, kontinuerlig eller ukontrollert vekst i et prosjekts omfang, når som helst etter at prosjektet starter
Grunner?
–        Dårlig endringskontroll
–        Mangel på riktig innledende identifikasjon og/eller dokumentasjon av funksjonene som kreves for å oppnå prosjektmålene
–        Svak prosjektleder eller utøvende sponsor
•        6. Kontrolerer Omfang - Scope Creep
•        For å redusere denne typen problemer er de foreslåtte løsningene som følger:
–        Definer krav som «må-has» og «fint å ha»
–        Sett forventninger til prosjektet
–        Bli enige om leveranser, og dokumenter
–        Dokumentere og gjennomgå forretningskrav
•        6. Kontrolerer Omfang - Urealistisk omfang
•        Det er flere typer urealistiske omfang som kan forekomme i programvareutviklingsprosjekter, og de kan variere avhengig av prosjektets natur og kompleksitet
•        F-35 Lightning II-prosjektet: involverer utviklingen av et komplekst militært fly, har opplevd betydelige kostnadsoverskridelser og tidsrammeproblemer, delvis på grunn av et svært ambisiøst omfang og teknologiske utfordringer.
•        NHS National Programme for IT (NPfIT):programmet i Storbritannia hadde som mål å transformere IT-systemene i National Health Service (NHS), men det ble preget av omfangskryp og kostnadsoverskridelser, og ble senere avviklet.
•        Denver International Airport Baggage Handling System: involverte utvikling av et komplekst bagasjebehandlingssystem for flyplassen, opplevde alvorlige utfordringer, inkludert urealistisk omfang og teknologiske problemer.

WH A T I S P R O J E C T S C O P E M A N A G E M E N T ?
Recall from Chapter 1 that several factors are associated with project success. Many of these
factors, such as user involvement, clear business objectives, a minimized or clearly defined
scope, and firm basic requirements, are elements of project scope management.
One of the most important and most difficult aspects of project management is
defining the scope of a project. Scope refers to all the work involved in creating the
products of the project and the processes used to create them. Recall from Chapter 2 that
the term deliverable describes a product produced as part of a project. Deliverables can
be product-related, such as a piece of hardware or software, or process-related, such as a
planning document or meeting minutes. Project stakeholders must agree on what the products
of the project are and, to some extent, how they should produce them to define all
of the deliverables.
Project scope management includes the processes involved in defining and controlling
what work is or is not included in a project. It ensures that the project team and stakeholders
have the same understanding of what products the project will produce and what
processes the project team will use to produce them. There are five main processes involved
in project scope management:
1. Collecting requirements involves defining and documenting the features and
functions of the products produced during the project as well as the processes
used for creating them. The project team creates stakeholder requirements
178
Chapter 5
documentation, a requirements management plan, and a requirements
traceability matrix as outputs of the requirements collection process.
2. Defining scope involves reviewing the project charter, requirements
documents, and organizational process assets to create a scope statement,
adding more information as requirements are developed and change requests
are approved. The main outputs of scope definition are the project scope
statement and updates to project documents.
3. Creating the WBS involves subdividing the major project deliverables into smaller,
more manageable components. The main outputs include a work breakdown
structure, a WBS dictionary, a scope baseline, and updates to project
documents.
4. Verifying scope involves formalizing acceptance of the project deliverables. Key
project stakeholders, such as the customer and sponsor for the project, inspect
and then formally accept the deliverables during this process. If the deliverables
are not acceptable, the customer or sponsor usually requests changes.
The main outputs of this process, therefore, are accepted deliverables and
change requests.
5. Controlling scope involves controlling changes to project scope throughout the
life of the project a challenge on many information technology projects. Scope
changes often influence the teams ability to meet project time and cost goals,
so project managers must carefully weigh the costs and benefits of scope
changes. The main outputs of this process are change requests, work performance
measurements, and updates to organizational process assets, the project
management plan, and project documents.
Figure 5-1 summarizes these processes and outputs and shows when they occur in a
typical project.
C O L L E C T I N G R E Q U I R E M E N T S
The first step in project scope management is often the most difficult: collecting requirements.
A major consequence of not defining requirements well is rework, which can consume up to
half of project costs, especially for software development projects. As illustrated in Figure 5-
2, it costs much more to correct a software defect that is found in later development phases
than to fix it in the requirements phase.
Part of the difficulty is that people often don t have a consistent definition of what
requirements are, how to collect them, and how to document them.
What Are Requirements?
The 1990 IEEE Standard Glossary of Software Engineering Terminology defines a requirement
as follows:
1. A condition or capability needed by a user to solve a problem or achieve an
objective.
2. A condition or capability that must be met or possessed by a system or system
component to satisfy a contract, standard, specification, or other formally
imposed document.
3. A documented representation of a condition or capability as in 1 or 2. 1
179
Project Scope Management
Operation
Test
Code
Design
Requirements
Development Phase
0 20 40 60 80 100
Relative Cost to Correct a Defect
120
Source: Robert B. Grady, “An Economic Release Decision Model: Insights into Software Project Management.”
Proceedings of the Applications of Software Measurement Conference (Orange Park, FL: Software Quality
Engineering, 1999), pp.227–239.
FIGURE 5-2 Relative cost to correct a software requirement defect
Planning
Process: Collect requirements
Outputs: Requirements documentation, requirements management plan,
requirements traceability matrix
Process:
Define scope
Outputs: Project scope statement, project document updates
Process: Create WBS
Outputs: WBS, WBS dictionary, scope baseline, project document update
Monitoring and Controlling
Process: Verify scope
Outputs: Accepted deliverables, change requests, project document updates
Process: Control Scope
Outputs: Work performance measurements, organizational process assets
updates, change requests, project management plan updates,
project document updates
Project Start Project Finish
FIGURE 5-1 Project scope management summary
180
Chapter 5
The PMBOK® Guide, Fourth Edition, defines a requirement almost identical to item 2
above: It says that a requirement is a condition or capability that must be met or possessed
by a system, product, service, result, or component to satisfy a contract, standard, specification,
or other formal document. It is important to document requirements in enough detail
so that they can be measured during project execution. After all, meeting scope goals is often
based on meeting documented requirements.
For example, the opening case describes a project for upgrading IT assets to meet
corporate standards. It says that these standards specify the minimum equipment required
for each desktop or laptop computer, such as the type of processor, amount of memory, and
hard disk size. The documented requirements for this project might include, therefore, that
all computers include an Intel processor, 4GB of memory, and a 160GB hard drive.
For some IT projects, it is helpful to divide requirements development into categories
called elicitation, analysis, specification, and validation. These categories include all the
activities involved in gathering, evaluating, and documenting requirements for a software
or software-containing product. It is also important to use an iterative approach to defining
requirements since requirements are often unclear early in a project. (See the Suggested
Readings on the companion Web site for further information.)
How Do You Collect Requirements?
There are several ways to collect requirements. Interviewing stakeholders one-on-one is
often very effective, although it can be very expensive and time-consuming. Holding focus
groups, facilitated workshops, and using group creativity and decision-making techniques
to collect requirements are normally faster and less expensive than one-on-one interviews.
Questionnaires and surveys can be very efficient ways to collect requirements as long as key
stakeholders provide honest and thorough information. Observation can also be a good technique
for collecting requirements, especially for projects that involve improving work processes
and procedures. Prototyping is a commonly used technique for collecting
requirements for software development projects. There are also several software tools available
to assist in collecting and managing requirements, as described later in this chapter and
in the following What Went Right? example.
WH A T WE N T R I G H T ?
With over 4,000 customers and 1,500 employees worldwide, Genesys Telecommunications
Laboratories has a reputation for pioneering telephony solutions by developing software to
manage customer interactions over the phone, via the Web, and with e-mail. However, as
the company grows, it has to make changes to meet the challenges of maintaining its competitive
edge in new product development. For example, Genesys now uses Accept
software, a product planning and innovation management application and winner of the
Excellence in Product Management Award from 2006 2008. Before implementing Accept,
Genesys product planning process was time-consuming and difficult to replicate from
release to release. Paul Lang, Vice President of Product Management and Strategy, says that
continued
181
Project Scope Management
Accept provides them a single system that contains all of their planning data across
multiple products for a multi-year, multi-phase program. With Accept, Lang says they can
instill a consistent, repeatable, and predictable process for new product definition and
development. They can define what information comprises a requirement and enforce discipline
around that process. Among other things, each requirement must show who
requested that enhancement and why, and these must be linked back to the corporate strategy
theme, product theme, and the release theme, Lang says.2
The project s size, complexity, importance, and other factors will affect how much effort
is spent on collecting requirements. For example, a team working on a project to upgrade
the entire corporate accounting system for a multibillion dollar company with more than
50 geographic locations should spend a fair amount of time collecting requirements. A project
to upgrade the hardware and software for a small accounting firm with only five employees,
on the other hand, would need a much smaller effort. In any case, it is important for a project
team to decide how they will collect and manage requirements. It is crucial to gather inputs
from key stakeholders and align the scope, a key aspect of the entire project, with business
strategy, as described in Chapter 4.
How Do You Document Requirements?
Just as there are several ways to collect requirements, there are several ways to document
them. Project teams should first review the project charter since it includes high-level requirements
for the project and may refer to other documents that include requirements. They
should also review the stakeholder register to ensure that all key stakeholders have a say in
determining requirements. The format for documenting stakeholder requirements can range
from a listing of all requirements on a single piece of paper to a room full of notebooks documenting
requirements. People who have worked on complex projects, such as building a new
airplane, know that the paper documenting requirements for a plane can weigh more than the
plane itself! Requirements documents are often generated by software and include text,
images, diagrams, videos, and other media. Requirements are also often broken down into different
categories such as functional requirements, service requirements, performance
requirements, quality requirements, training requirements, and so on.
In addition to preparing stakeholder requirements documentation as an output of the
collecting requirements process, project teams often create a requirements management
plan and a requirements traceability matrix. The requirements management plan
describes how project requirements will be analyzed, documented, and managed.
A requirements traceability matrix (RTM) is a table that lists requirements, various
attributes of each requirement, and the status of the requirements to ensure that all
requirements are addressed. Table 5-1 provides an example of an RTM entry for the IT
Upgrade Project described in the opening case. There are many variations of what can
be included in an RTM. For example, software requirements are often documented in an
RTM that cross-references each requirement with related ones and lists specific tests to
verify that they are met. Remember that the main purpose of an RTM is to maintain the
linkage from the source of each requirement through its decomposition to implementation
and verification.
182
Chapter 5
D E F I N I N G S C O P E
The next step in project scope management is to define in detail the scope or work required
for the project. Good scope definition is very important to project success because it helps
improve the accuracy of time, cost, and resource estimates, it defines a baseline for performance
measurement and project control, and it aides in communicating clear work responsibilities.
The main tools and techniques used in defining scope include expert judgment,
product analysis, alternatives identification, and facilitated workshops. The main outputs of
scope definition are the project scope statement and project document updates.
Key inputs for preparing the project scope statement include the project charter, requirements
documentation, and organizational process assets such as policies and procedures
related to scope statements as well as project files and lessons learned from previous, similar
projects. Table 5-2 shows the project charter for the IT Upgrade Project described in the
opening case. Notice how information from the project charter provides a basis for further
defining the project scope. The charter describes the high-level scope, time, and cost goals for
the project objectives and success criteria, a general approach to accomplishing the project s
goals, and the main roles and responsibilities of important project stakeholders.
TABLE 5-2 Sample project charter
Project Title: Information Technology (IT) Upgrade Project
Project Start Date: March 4 Projected Finish Date: December 4
Key Schedule Milestones:
Inventory update completed April 15
Hardware and software acquired August 1
Installation completed October 1
Testing completed November 15
Budget Information: Budgeted $1,000,000 for hardware and software costs and $500,000
for labor costs.
Project Manager: Kim Nguyen, (310) 555 2784, knguyen@course.com
(continued)
TABLE 5-1 Sample requirements traceability matrix
Requirement
No.
Name Category Source Status
R32 Laptop
memory
Hardware Project charter
and corporate
laptop
specifications
Complete. Laptops
ordered meet requirement
by having 4GB
of memory.
183
Project Scope Management
Project Objectives: Upgrade hardware and software for all employees (approximately
2,000) within nine months based on new corporate standards. See attached sheet
describing the new standards. Upgrades may affect servers, as well as associated network
hardware and software.
Main Project Success Criteria: The hardware, software, and network upgrades must meet
all written specifications, be thoroughly tested, and be completed in less than ten months.
Employee work disruptions will be minimal.
Approach:
Update the information technology inventory database to determine upgrade needs
Develop detailed cost estimate for project and report to CIO
Issue a request for quote to obtain hardware and software
Use internal staff as much as possible for planning, analysis, and installation
TABLE 5-NAN Roles and ResponsibiRlitOieLsES AND RESPONSIBILITIES
Name Role Responsibility
Walter Schmidt CEO Project sponsor, monitor project
Mike Zwack CIO Monitor project, provide staff
Kim Nguyen Project Manager Plan and execute project
Jeff Johnson Director of Information
Technology Operations
Mentor Kim
Nancy Reynolds VP, Human Resources Provide staff, issue memo to all
employees about project
Steve McCann Director of Purchasing Assist in purchasing hardware and
software
ROLES AND RESPONSBILITES
Sign off: (Signatures of all the above stakeholders)
Comments: (Handwritten or typed comments from above stakeholders, if applicable)
This project must be done within ten months at the absolute latest. Mike Zwack, CIO
We are assuming that adequate staff will be available and committed to supporting this
project. Someworkmust be done after hours to avoidwork disruptions, and overtimewill be
provided. Jeff Johnson and Kim Nguyen, Information Technology department.
184
Chapter 5
Although contents vary, project scope statements should include, at a minimum, a
product scope description, product user acceptance criteria, and detailed information on all
project deliverables. It is also helpful to document other scope-related information, such
as the project boundaries, constraints, and assumptions. The project scope statement
should also reference supporting documents, such as product specifications that will affect
what products are produced or purchased, or corporate policies, which might affect how
products or services are produced. Many information technology projects also require
detailed functional and design specifications for developing software, which also should be
referenced in the detailed scope statement.
As time progresses, the scope of a project should become more clear and specific.
For example, the project charter for the IT Upgrade Project shown in Table 5-2 includes
a short statement about the servers and other computers and software that the IT
Upgrade Project may affect. Table 5-3 provides an example of how the scope becomes
progressively elaborated or more detailed in scope statements labeled Version 1 and
Version 2.
Notice in Table 5-3 that the project scope statements often refer to related documents,
which can be product specifications, product brochures, or other plans. As more information
becomes available and decisions are made related to project scope, such as specific products
that will be purchased or changes that have been approved, the project team should
update the project scope statement. They might name different iterations of the scope statement
Version 1, Version 2, and so on. These updates may also require changes to be made
to other project documents. For example, if the company must purchase servers for the
project from a supplier it has never worked with before, the procurement management plan
should include information on working with that new supplier.
An up-to-date project scope statement is an important document for developing and
confirming a common understanding of the project scope. It describes in detail the work
TABLE 5-3 Further defining project scope
Project Charter:
Upgrades may affect servers . . . (listed under Project Objectives)
Project Scope Statement, Version 1:
Servers: If additional servers are required to support this project, theymust be compatible
with existing servers. If it is more economical to enhance existing servers, a detailed
description of enhancementsmust be submitted to theCIOfor approval. See current server
specifications provided in Attachment 6. The CEOmust approve a detailed plan describing
the servers and their location at least two weeks before installation.
Project Scope Statement, Version 2:
Servers: This project will require purchasing ten new servers to support Web, network,
database, application, and printing functions. Virtualization will be used to maximize
efficiency. Detailed descriptions of the servers are provided in a product brochure in
Appendix 8 along with a plan describing where they will be located.
185
Project Scope Management
to be accomplished on the project and is an important tool for ensuring customer satisfaction
and preventing scope creep, as described later in this chapter.
Recall from Chapter 1 the importance of addressing the triple constraint of project
management meeting scope, time, and cost goals for a project. Time and cost goals are
normally straightforward. For example, the time goal for the IT Upgrade Project is nine
months, and the cost goal is $1.5 million. It is much more difficult to describe, agree upon,
and meet the scope goal of many projects.
M E D I A S N A P S H O T
Many people enjoy watching television shows like Trading Spaces, where participants have
two days and $1,000 to update a room in their neighbor s house. Since the time and cost are
set, it s the scope that has the most flexibility. Examples of some of the work completed
include new flooring, light fixtures, paint, new shelves, or artwork to brighten up a dull
room.
Designers on these shows often have to change initial scope goals due to budget or time
constraints. For example, designers often go back to local stores to exchange items, such
as lights, artwork, or fabric, for less expensive items to meet budget constraints. Or they
might describe a new piece of furniture they d like the carpenter to build, but the carpenter
changes the design or materials to meet time constraints. Occasionally designers can buy
more expensive items or have more elaborate furniture built because they underestimated
costs and schedules.
Another important issue related to project scope management is meeting customer
expectations. Who wouldn t be happy with a professionally designed room at no cost to
them? Although most homeowners are very happy with work done on the show, some are
obviously disappointed. Unlike most projects where the project team works closely with the
customer, homeowners have little say in what gets done and cannot inspect the work along
the way. They walk into their newly decorated room with their eyes closed. Modernizing a
room can mean something totally different to a homeowner and the interior designer. For
example, one woman was obviously shocked when she saw her bright orange kitchen with
black appliances. Another couple couldn t believe there was moss on their bedroom walls.
What happens when the homeowners don t like the work that s been done? Part of agreeing
to be on the show includes signing a release statement acknowledging that you will accept
whatever work has been done. Too bad you can t get sponsors for most projects to sign a
similar release statement. It would make project scope management much easier!
C R E A T I N G T H E WO R K B R E A K D OWN
S T R U C T U R E
After collecting requirements and defining scope, the next step in project scope management
is to create a work breakdown structure. A work breakdown structure (WBS) is a
deliverable-oriented grouping of the work involved in a project that defines the total scope
of the project. Because most projects involve many people and many different deliverables,
it is important to organize and divide the work into logical parts based on how the work will
be performed. The WBS is a foundation document in project management because it
186
Chapter 5
provides the basis for planning and managing project schedules, costs, resources, and
changes. Since the WBS defines the total scope of the project, some project management
experts believe that work should not be done on a project if it is not included in the WBS.
Therefore, it is crucial to develop a good WBS.
The project scope statement, stakeholder requirements documentation, and organizational
process assets are the primary inputs for creating a WBS. The main tool or technique
is decomposition, that is, subdividing project deliverables into smaller pieces. The outputs
of the process of creating the WBS are the WBS itself, the WBS dictionary, a scope baseline,
and project document updates.
What does a WBS look like? A WBS is often depicted as a task-oriented family tree of
activities, similar to an organizational chart. A project team often organizes the WBS around
project products, project phases, or using the project management process groups. Many people
like to create a WBS in chart form first to help them visualize the whole project and all
of its main parts. For example, Figure 5-3 shows a WBS for an intranet project. Notice that
product areas provide the basis for its organization. In this case, there are main boxes or
groupings on the WBS for developing the Web site design, the home page for the intranet, the
marketing department s pages, and the sales department s pages.
In contrast, a WBS for the same intranet project can be organized around project
phases, as shown in Figure 5-4.3 Notice that project phases of concept, Web site design, Web
site development, roll out, and support provide the basis for its organization.
Also note the levels in Figure 5-4. The name of the entire project is the top box, called
Level 1, and the main groupings for the work are listed in the second tier of boxes, called
Level 2. This level numbering is based on PMI s Practice Standard for Work Breakdown
Structures, Second Edition (2006). Each of those boxes can be broken down into subsequent
tiers of boxes to show the hierarchy of the work. PMI uses the term task to describe each
level of work in the WBS. For example, in Figure 5-4, the following items can be referred to
as tasks: the Level 2 item called Concept, the Level 3 item called Define requirements, and
the Level 4 item called Define user requirements. Tasks that are decomposed into smaller
tasks are called summary tasks. Figure 5-4 shows a sample WBS in both chart and tabular
form. Notice that both of these formats show the same information. Many documents, such
as contracts, use the tabular format. Project management software also uses this format. The
WBS becomes the contents of the Task Name column in Microsoft Project, and the hierarchy
or level of tasks is shown by indenting and numbering tasks within the software. The numbering
shown in the tabular form on the left in Figure 5-4 coincides with numbering in Microsoft
Web site design Home page design Marketing pages Sales pages
Intranet
Site map
Programs
Graphic design
Text
Hyperlinks
Images
Text
Hyperlinks
Images
Text
Hyperlinks
Images
FIGURE 5-3 Sample intranet WBS organized by product
187
Project Scope Management
Project and other sources. The numbering shown in the tabular form on the right in Figure
5-4 is based on PMI s Practice Standard for Work Breakdown Structures, Second Edition.
Be sure to check with your organization to see what numbering scheme they prefer to use for
work breakdown structures.
In Figure 5-4, the lowest level of the WBS is Level 4. A work package is a task at the
lowest level of the WBS. In Figure 5-4, tasks 1.2.1, 1.2.2, 1.2.3, and 1.2.4 (based on the numbering
on the left) are work packages. The other tasks would probably be broken down further.
However, some tasks can remain at Level 2 or 3 in the WBS. Some might be broken
down to Level 5 or 6, depending on the complexity of the work. A work package also represents
the level of work that the project manager monitors and controls. You can think of
work packages in terms of accountability and reporting. If a project has a relatively short
time frame and requires weekly progress reports, a work package might represent work
completed in one week or less. If a project has a very long time frame and requires quarterly
Level 1 - Entire Project
Level 2
Level 3
Level 4
Web site
development
Concept Web site
design
Roll out Support
Intranet
project
Evaluate
current
systems
Define
risks & risk
management
approach
Develop
project plan
Define
specific
functionality
Brief Web
development
team
Define content
requirements
Define user
requirements
Define system
requirements
Define server
owner
requirements
Define
requirements
Chart
form
Tabular form with Microsoft Project numbering
1.0 Concept
1.1 Evaluate current systems
1.2 Define requirements
1.2.1 Define user requirements
1.2.2 Define content requirements
1.2.3 Define system requirements
1.2.4 Define server owner requirements
1.3 Define specific functionality
1.4 Define risks and risk management
approach
1.5 Develop project plan
1.6 Brief Web development team
2.0 Web site design
3.0 Web site development
4.0 Roll out
5.0 Support
Tabular form with PMI numbering
1.1 Concept
1.1.1 Evaluate current systems
1.1.2 Define requirements
1.1.2.1 Define user requirements
1.1.2.2 Define content requirements
1.1.2.3 Define system requirements
1.1.2.4 Define server owner requirements
1.1.3 Define specific functionality
1.1.4 Define risks and risk management
approach
1.1.5 Develop project plan
1.1.6 Brief Web development team
1.2 Web site design
1.3 Web site development
1.4 Roll out
1.5 Support
FIGURE 5-4 Sample intranet WBS organized by phase in chart and tabular form
188
Chapter 5
progress reports, a work package might represent work completed in one month or more.
A work package might also be the procurement of a specific product or products, such as
an item or items purchased from an outside source.
Another way to think of work packages relates to entering data into project management
software. You can only enter duration estimates for work packages. The rest of the
WBS items are just groupings or summary tasks for the work packages. The software automatically
calculates duration estimates for various WBS levels based on data entered for
each work package and the WBS hierarchy. See Appendix A for detailed information on
using Project 2007.
Figure 5-5 shows the phase-oriented intranet WBS, using the Microsoft Project numbering
scheme from Figure 5-4, in the form of a Gantt chart created in Project 2007. You can see from
this figure that the WBS is the basis for project schedules. Notice that the WBS is in the left part
of the figure under the Task Name column. The resulting schedule is in the right part of the figure.
You will learn more about Gantt charts in Chapter 6, Project Time Management.
The sample WBSs shown here seem somewhat easy to construct and understand.
Nevertheless, it is very difficult to create a good WBS. To create a good WBS, you must
understand the project and its scope and incorporate the needs and knowledge of the
stakeholders. The project manager and the project team must decide as a group how to
organize the work and how many levels to include in the WBS. Many project managers have
found that it is better to focus on getting the top levels done well before getting too bogged
down in more detailed levels.
Many people confuse tasks on a WBS with specifications. Tasks on a WBS represent
work that needs to be done to complete the project. For example, if you are creating a WBS
to redesign a kitchen, you might have Level 2 categories called design, purchasing, flooring,
walls, cabinets, and appliances. Under flooring, you might have tasks to remove the old
flooring, install the new flooring, and install the trim. You would not have tasks like 12 ft.
by 14 ft. of light oak or flooring must be durable.
WBS Schedule
FIGURE 5-5 Intranet Gantt chart in Microsoft Project
189
Project Scope Management
Another concern when creating a WBS is how to organize it so that it provides the basis
for the project schedule. You should focus on what work needs to be done and how it will be
done, not when it will be done. In other words, the tasks do not have to be developed as a
sequential list of steps. If you do want some time-based flow for the work, you can create a
WBS using the project management process groups of initiating, planning, executing, monitoring
and controlling, and closing as Level 2 in the WBS. By doing this, not only does the project
team follow good project management practice, but the WBS tasks can also be mapped more
easily against time. For example, Figure 5-6 shows a WBS and Gantt chart for the intranet
project, organized by the five project management process groups. Tasks under initiating
include selecting a project manager, forming the project team, and developing the project
charter. Tasks under planning include developing a scope statement, creating a WBS, and
developing and refining other plans, which would be broken down in more detail for a real
project. The tasks of concept, Web site design, Web site development, and roll out, which
were WBS Level 2 items in Figure 5-4, now become WBS Level 3 items under executing. The
executing tasks vary the most from project to project, but many of the tasks under the other
project management process groups would be similar for all projects. If you do not use the
project management process groups in the WBS, you can have a Level 2 category called project
management to make sure that tasks related to managing the project are accounted for.
Remember that all work should be included in the WBS, including project management.
JWD Consulting used the project management process groups for the Level 2 items in
its WBS for the Project Management Intranet Site Project in Chapter 3. The project team
focused on the product deliverables they had to produce for the project in breaking down
the executing task. Table 5-4 shows the categories they used for that part of the WBS. Some
project teams like to list every deliverable they need to produce and then use those as the
basis for creating all or part of their WBS. Recall that the scope statement should list and
describe all of the deliverables required for the project. It is very important to ensure consistency
between the project charter, scope statement, WBS, and Gantt chart to define the
scope of the project accurately.
WBS Schedule
FIGURE 5-6 Intranet project Gantt chart organized by project management process groups
190
Chapter 5
It is also very important to involve the entire project team and the customer in creating
and reviewing the WBS. People who will do the work should help to plan the work by
creating the WBS. Having group meetings to develop a WBS helps everyone understand
what work must be done for the entire project and how it should be done, given the people
involved. It also helps to identify where coordination between different work packages will
be required.
Approaches to Developing Work Breakdown Structures
There are several approaches you can use to develop a work breakdown structure. These
approaches include:
Using guidelines
The analogy approach
The top-down approach
The bottom-up approach
The mind-mapping approach
Using Guidelines
If guidelines for developing a WBS exist, it is very important to follow them. Some organizations
the U.S. Department of Defense (DOD) for example prescribe the form and content for
WBSs for particular projects. Many DOD projects require contractors to prepare their proposals
based on the DOD-provided WBS. These proposals must include cost estimates for each task
in the WBS at a detailed and summary level. The cost for the entire project must be calculated
by summing the costs of all of the lower-level WBS tasks. When DOD personnel evaluate cost
proposals, they must compare the contractors costs with the DOD s estimates. A large variation
in costs for a certain WBS task often indicates confusion as to what work must be done.
TABLE 5-4 Executing tasks for JWD Consulting s WBS
3.0 Executing
3.1 Survey
3.2 User inputs
3.3 Intranet site content
3.3.1 Templates and tools
3.3.2 Articles
3.3.3 Links
3.3.4 Ask the Expert
3.3.5 User requests
3.4 Intranet site design
3.5 Intranet site construction
3.6 Site testing
3.7 Site promotion
3.8 Site roll out
3.9 Project benefits measurement
191
Project Scope Management
Consider a large automation project for the U.S. Air Force. In the mid-1980s, the Air
Force developed a request for proposals for the Local On-Line Network System (LONS) to
automate 15 Air Force Systems Command bases. This $250 million project involved providing
the hardware and developing software for sharing documents such as contracts, specifications,
requests for proposals, and so on. The Air Force proposal guidelines included a WBS that contractors
were required to follow in preparing their cost proposals. Level 2 WBS items included
hardware, software development, training, project management, and the like. The hardware
item was composed of several Level 3 items, such as servers, workstations, printers, network
hardware, and so on. Air Force personnel reviewed the contractors cost proposals against
their internal cost estimate, which was also based on this WBS. Having a prescribed WBS
helped contractors to prepare their cost proposals and the Air Force to evaluate them.
Many organizations provide guidelines and templates for developing WBSs, as well as
examples of WBSs from past projects. Microsoft Project 2007 comes with several templates,
and more are available on Microsoft s Web site and other sites. At the request of many of its
members, the Project Management Institute developed a WBS Practice Standard to provide
guidance for developing and applying the WBS to project management (see the Suggested
Readings for this chapter on the companion Web site). This document includes sample
WBSs for a wide variety of projects in various industries, including projects for Web design,
telecom, service industry outsourcing, and software implementation.
Project managers and their teams should review appropriate information to develop
their unique project WBSs more efficiently. For example, Kim Nguyen and key team members
from the opening case should review their company s WBS guidelines, templates, and
other related information before and during the team meetings to create their WBS.
The Analogy Approach
Another approach for constructing a WBS is the analogy approach. In the analogy
approach, you use a similar project s WBS as a starting point. For example, Kim Nguyen
from the opening case might learn that one of her organization s suppliers did a similar
information technology upgrade project last year. She could ask them to share their WBS for
that project to provide a starting point for her own project.
McDonnell Aircraft Company, now part of Boeing, provides an example of using an analogy
approach when creating WBSs. McDonnell Aircraft Company designed and manufactured
several different fighter aircraft. When creating a WBS for a new aircraft design, it
started by using 74 predefined subsystems for building a fighter aircraft based on past experience.
There was a Level 2 WBS item for the airframe that was composed of Level 3 items
such as a forward fuselage, center fuselage, aft fuselage, and wings. This generic product-oriented
WBS provided a starting point for defining the scope of new aircraft projects and
developing cost estimates for new aircraft designs.
Some organizations keep a repository of WBSs and other project documentation on file
to assist people working on projects. Project 2007 and many other software tools include
sample files to assist users in creating a WBS and Gantt chart. Viewing examples of other
similar projects WBSs allows you to understand different ways to create a WBS.
The Top-down and Bottom-up Approaches
Two other approaches for creating WBSs are the top-down and bottom-up approaches. Most
project managers consider the top-down approach of WBS construction to be conventional.
192
Chapter 5
To use the top-down approach, start with the largest items of the project and break them
into their subordinate items. This process involves refining the work into greater and greater
levels of detail. For example, Figure 5-4 shows how work was broken down to Level 4 for
part of the intranet project. After finishing the process, all resources should be assigned at
the work package level. The top-down approach is best suited to project managers who have
vast technical insight and a big-picture perspective.
In the bottom-up approach, team members first identify as many specific tasks related
to the project as possible. They then aggregate the specific tasks and organize them into
summary activities, or higher levels in the WBS. For example, a group of people might be
responsible for creating a WBS to create an e-commerce application. Instead of looking for
guidelines on how to create a WBS or viewing similar projects WBSs, they could begin by listing
detailed tasks they think they would need to do in order to create the application. After
listing these detailed tasks, they would group the tasks into categories. Then they would group
these categories into higher-level categories. Some people have found that writing all possible
tasks down on notes and then placing them on a wall helps them see all the work required for
the project and develop logical groupings for performing the work. For example, a business
analyst on the project team might know that they had to define user requirements and content
requirements for the e-commerce application. These tasks might be part of the requirements
documents they would have to create as one of the project deliverables. A hardware
specialist might know they had to define system requirements and server requirements,
which would also be part of a requirements document. As a group, they might decide to put all
four of these tasks under a higher-level item called define requirements that would result
in the delivery of a requirements document. Later, they might realize that defining requirements
should fall under a broader category of concept design for the e-commerce application,
along with other groups of tasks related to the concept design. The bottom-up approach can
be very time-consuming, but it can also be a very effective way to create a WBS. Project
managers often use the bottom-up approach for projects that represent entirely new systems
or approaches to doing a job, or to help create buy-in and synergy with a project team.
Mind Mapping
Some project managers like to use mind mapping to help develop WBSs. As described in
Chapter 4 when showing an example of performing a SWOT analysis, mind mapping is a
technique that uses branches radiating out from a core idea to structure thoughts and ideas.
Instead of writing tasks down in a list or immediately trying to create a structure for tasks,
mind mapping allows people to write and even draw pictures of ideas in a nonlinear format.
This more visual, less-structured approach to defining and then grouping tasks can unlock
creativity among individuals and increase participation and morale among teams.4
Figure 5-7 shows a diagram that uses mind mapping to create a WBS for the IT Upgrade
Project from Chapter 3. The figure was created using MindManager software by Mindjet
(www.mindjet.com). The circle in the center represents the entire project. Each of the four
main branches radiating out from the center represents the main tasks or Level 2 items for
the WBS. Different people at the meeting creating this mind map might have different roles
in the project, which could help in deciding the tasks and WBS structure. For example, Kim
would want to focus on all of the project management tasks, and she might also know that
they will be tracked in a separate budget category. People who are familiar with acquiring
or installing hardware and software might focus on that work, and so on. Branching off from
193
Project Scope Management
the main task called Update inventory are two subtasks, Perform physical inventory and
Update database. Branching off from the Perform physical inventory subtask are three
further subdivisions, labeled Building A, Building B, and Building C, and so on. The team
would continue to add branches and items until they have exhausted ideas on what work
needs to be performed.
After discovering WBS items and their structure using the mind-mapping technique, you
could then translate the information into chart or tabular form, as described earlier. A feature
of MindManager software is that you can export your map into Microsoft Project. The WBS
is entered in the Task List column, with the structure automatically created based on the
mind map. Figure 5-8 shows the resulting Project 2007 file for the IT Upgrade Project.
Mind mapping can be used for developing WBSs using the top-down or bottom-up
approach. For example, you could conduct mind mapping for an entire project by listing the
whole project in the center of a document, adding the main categories on branches radiating
out from the center, and then adding branches for appropriate subcategories. You could also
develop a separate mind-mapping diagram for each deliverable and then merge them to create
one large diagram for the entire project. You can also add items anywhere on a mind-mapping
document without following a strict top-down or bottom-up approach. After the mind-mapping
documents are complete, you can convert them into a chart or tabular WBS form.
The WBS Dictionary and Scope Baseline
As you can see from these sample WBSs, many of the items listed on them are rather vague.
What exactly does Update database mean, for example? The person responsible for this
task might think that it does not need to be broken down any further, which could be fine.
However, the task should be described in more detail so everyone has the same understanding
of what it involves. What if someone else has to perform the task? What would you tell
him/her to do? What will it cost to complete the task? Information that is more detailed is
needed to answer these and other questions.
A WBS dictionary is a document that describes detailed information about each WBS
item. The format of the WBS dictionary can vary based on project needs. It might be appropriate
to have just a short paragraph describing each work package. For a more complex
project, an entire page or more might be needed for the work package descriptions. Some
Project management
Upgrade inventory
Update
database
Servers
Desktops
Laptops
User
hardware
Perform physical
inventory
IT Upgrade Project
Install hardware and software Acquire hardware and software
Building C
Building B
Building A
FIGURE 5-7 Sample mind-mapping technique for creating a WBS
194
Chapter 5
projects might require that each WBS item describe the responsible organization, resource
requirements, estimated costs, and other information.
Kim should work with her team and sponsor to determine the level of detail needed in
the WBS dictionary. They should also decide where this information will be entered and how
it will be updated. Project teams often review WBS dictionary entries from similar tasks to get
a better idea of how to create these entries. For the IT Upgrade Project, Kim and her team
decided to enter all of the WBS dictionary information into their enterprise project management
system, following departmental guidelines. Table 5-5 is an example of one entry.
FIGURE 5-8 Project 2007 file with WBS generated from a mind map
TABLE 5-5 Sample WBS dictionary entry
WBS Dictionary Entry March 20
Project Title: Information Technology (IT) Upgrade Project
WBS Item Number: 2.2
WBS Item Name: Update Database
Description: The IT department maintains an online database of hardware and software
on the corporate Intranet. However, we need to make sure that we know exactly what
(continued)
195
Project Scope Management
The approved project scope statement and its associatedWBS andWBS dictionary formthe
scope baseline. Performance inmeeting project scope goals is based on this scope baseline.
Advice for Creating a WBS and WBS Dictionary
As stated previously, creating a good WBS is no easy task and usually requires several
iterations. Often, it is best to use a combination of approaches to create a project s WBS.
There are some basic principles, however, that apply to creating any good WBS and its WBS
dictionary.
A unit of work should appear at only one place in the WBS.
The work content of a WBS item is the sum of the WBS items below it.
A WBS item is the responsibility of only one individual, even though many
people may be working on it.
The WBS must be consistent with the way in which work is actually going to
be performed; it should serve the project team first, and other purposes only
if practical.
Project team members should be involved in developing the WBS to ensure
consistency and buy-in.
Each WBS item must be documented in a WBS dictionary to ensure accurate
understanding of the scope of work included and not included in that item.
The WBS must be a flexible tool to accommodate inevitable changes while
properly maintaining control of the work content in the project according to
the scope statement.5
V E R I F Y I N G S C O P E
It is difficult to create a good project scope statement and WBS for a project. It is even more
difficult, especially on information technology projects, to verify the project scope and minimize
scope changes. Some project teams know from the start that the scope is very unclear
hardware and software employees are currently using and if they have any unique needs
before we decide what to order for the upgrade. This task will involve reviewing information
from the current database, producing reports that list each department s employees
and location, and updating the data after performing the physical inventory and receiving
inputs from department managers. Our project sponsor will send out a notice to all
department managers to communicate the importance of this project and this particular
task. In addition to general hardware and software upgrades, the project sponsors will ask
the department managers to provide information for any unique requirements they
might have that could affect the upgrades. This task also includes updating the inventory
data for network hardware and software. After updating the inventory database, we will
send an e-mail to each department manager to verify the information and make changes
online, as needed. Department managers will be responsible for ensuring that their people
are available and cooperative during the physical inventory. Completing this task is
dependent on WBS Item Number 2.1, Perform Physical Inventory and must precede WBS
Item Number 3.0, Acquire Hardware and Software.
196
Chapter 5
and that they must work closely with the project customer to design and produce various
deliverables. In this case, the project team must develop a process for scope verification that
meets unique project needs. Careful procedures must be developed to ensure the
customer is getting what they want and the project team has enough time and money to produce
the desired products and services.
Even when the project scope is fairly well defined, many information technology
projects suffer from scope creep the tendency for project scope to keep getting bigger and
bigger. There are many horror stories about information technology projects failing due to
scope problems such as scope creep, with a few classic examples in the following What Went
Wrong? feature. For this reason, it is very important to verify the project scope with users
throughout the life of the project and develop a process for controlling scope changes.
WH A T WE N T WR O N G ?
A project scope that is too broad and grandiose can cause severe problems. Scope creep and
an overemphasis on technology for technology s sake resulted in the bankruptcy of a large
pharmaceutical firm, Texas-based FoxMeyer Drug. In 1994, the CIO was pushing for a $65
million system to manage the company s critical operations. He did not believe in keeping
things simple, however. The company spent nearly $10 million on state-of-the-art hardware
and software and contracted the management of the project to a prestigious (and expensive)
consulting firm. The project included building an $18 million robotic warehouse, which
looked like something out of a science fiction movie, according to insiders. The scope of the
project kept getting bigger and more impractical. The elaborate warehouse was not ready
on time, and the new system generated erroneous orders that cost FoxMeyer Drug more than
$15 million in unrecovered excess shipments. In July 1996, the company took a $34 million
charge for its fourth fiscal quarter, and by August of that year, FoxMeyer Drug filed for bankruptcy.
6 Another example of scope creep comes from McDonald s Restaurants. In 2001, the
fast-food chain initiated a project to create an intranet that would connect its headquarters
with all of its restaurants to provide detailed operational information in real time. For example,
headquarters would know if sales were slowing or if the grill temperature was correct in
every single store all 30,000 of them in more than 120 countries. McDonald s would not
divulge detailed information, but they admitted that the project was too large in scale and
scope. After spending $170 million on consultants and initial implementation planning,
McDonald s realized that the project was too much to handle and terminated it.7
Another major scope problem on information technology projects is a lack of user
involvement. For example, in the late 1980s at Northrop Grumman, which specializes in
defense electronics, information technology, advanced aircraft, shipbuilding, and space
technology, an information technology project team became convinced that it could, and
should, automate the review and approval process of government proposals. The team
implemented a powerful workflow system to manage the whole process. Unfortunately, the
end users for the system were aerospace engineers who preferred to work in a more casual,
ad hoc fashion. They dubbed the system Naziware and refused to use it. This example
illustrates an information technology project that wasted millions of dollars developing a
system that was not in touch with the way end users did their work.8
continued
197
Project Scope Management
Failing to follow good project management processes and use off-the-shelf software also
results in scope problems. 21st Century Insurance Group in Woodland Hills, California,
paid Computer Sciences Corporation $100 million on a project to develop a system for
managing business applications, including managing insurance policies, billing, claims, and
customer service. After five years, the system was still in development and used to support
less than 2 percent of the company s business. Joshua Greenbaum, an analyst at Enterprise
Applications Consulting, called the project a huge disaster and questioned the insurance
company s ability to manage a process that is pretty well known these days . . . . Im
surprised that there wasn t some way to build what they needed using off-the-shelf
components and lower their risk. 9
Scope verification involves formal acceptance of the completed project scope by the
stakeholders. This acceptance is often achieved by a customer inspection and then sign-off
on key deliverables. To receive formal acceptance of the project scope, the project team
must develop clear documentation of the project s products and procedures to evaluate if
they were completed correctly and satisfactorily. Recall from Chapter 4 that configuration
management specialists identify and document the functional and physical characteristics
of the project s products, record and report the changes, and audit the products to verify
conformance to requirements. To minimize scope changes, it is crucial to do a good job of
configuration management and verifying project scope.
The project management plan, requirements documentation, the requirements traceability
matrix, and validated deliverables are the main inputs for scope verification. The main tool
for performing scope verification is inspection. The customer, sponsor, or user inspects the
work after it is delivered. The main outputs of scope verification are accepted deliverables,
change requests, and project document updates. For example, suppose Kims team members
deliver upgraded computers to users as part of the IT Upgrade Project. Several users might
complain because the computers did not include special keyboards they need for medical reasons.
Appropriate people would review this change request and take appropriate corrective
action, such as getting sponsor approval for purchasing the special keyboards.
C O N T R O L L I N G S C O P E
As discussed in the section of Chapter 4 on integrated change control, change is inevitable
on projects, especially changes to the scope of information technology projects. Scope control
involves controlling changes to the project scope. Users often are not exactly sure how
they want screens to look or what functionality they will really need to improve business
performance. Developers are not exactly sure how to interpret user requirements, and they
also have to deal with constantly changing technologies.
The goal of scope control is to influence the factors that cause scope changes, assure
changes are processed according to procedures developed as part of integrated change control,
and manage changes when they occur. You cannot do a good job of controlling scope
if you do not first do a good job of collecting requirements, defining scope, and verifying
scope. How can you prevent scope creep when you have not agreed on the work to be
performed and your sponsor hasn t verified that the proposed work was acceptable? You
also need to develop a process for soliciting and monitoring changes to project scope.
198
Chapter 5
Stakeholders should be encouraged to suggest changes that will benefit the overall project
and discouraged from suggesting unnecessary changes.
The project management plan, work performance data, requirements documentation,
requirements traceability matrix, and organizational process assets are the main inputs to
scope control. An important tool for performing scope control is variance analysis. Variance
is the difference between planned and actual performance. For example, if a supplier was
supposed to deliver five special keyboards and you received only four, the variance would
be one keyboard. The outputs of scope control include work performance measurements,
organizational process assets updates, change requests, project management plan updates,
and project document updates.
Table 1-2 in Chapter 1 lists the top ten factors that help information technology projects
succeed. Four of these ten factors are related to scope verification and control: user involvement,
clear business objectives, minimized or clearly defined scope, and firm basic requirements.
To avoid project failures, therefore, it is crucial for information technology project
managers and their teams to work on improving user input and reducing incomplete and
changing requirements and specifications.
B E S T P R A C T I C E
As seen from the examples of What Went Wrong?, companies should follow these best practices
to avoid major scope problems:
1. Keep the scope realistic. Don t make projects so large that they can t be completed.
Break large projects down into a series of smaller ones.
2. Involve users in project scope management. Assign key users to the project team and
give them ownership of requirements definition and scope verification.
3. Use off-the-shelf hardware and software whenever possible. Many IT people enjoy using
the latest and greatest technology, but business needs, not technology trends, must take
priority.
4. Follow good project management processes. As described in this chapter and others,
there are well-defined processes for managing project scope and others aspects of
projects.
Managing the scope of software development is often very difficult, but frameworks
such as IBM s Rational Unified Process® (RUP) can help. For example, RUP describes a set
of principles that characterize best practices in the creation, deployment, and evolution of
software-intensive systems as follows:
Adapt the process
Balance competing stakeholder priorities
Collaborate across teams
Demonstrate value iteratively
Elevate the level of abstraction
Focus continuously on quality10
199
Project Scope Management
The following sections provide more suggestions for improving scope management on
information technology projects.
Suggestions for Improving User Input
Lack of user input leads to problems with managing scope creep and controlling change. How
can you manage this important issue? Following are suggestions for improving user input:
Develop a good project selection process for information technology projects.
Insist that all projects have a sponsor from the user organization. The sponsor
should not be someone in the information technology department, nor should
the sponsor be the project manager. Make project information, including the
project charter, project management plan, project scope statement, WBS, and
WBS dictionary, easily available in the organization. Making basic project information
available will help avoid duplication of effort and ensure that the most
important projects are the ones on which people are working.
Have users on the project team. Some organizations require project managers
to come from the business area of the project instead of the information technology
group. Some organizations assign co-project managers to information
technology projects, one from information technology and one from the main
business group. Users should be assigned full-time to large information technology
projects and part-time to smaller projects. A key success factor in Northwest
Airline s ResNet project (see the companion Web site to read the entire
case study for this project) was training reservation agents the users in how
to write programming code for their new reservation system. Because the sales
agents had intimate knowledge of the business, they provided excellent input
and actually created most of the software.
Have regular meetings with defined agendas. Meeting regularly sounds obvious,
but many information technology projects fail because the project team members
do not have regular interaction with users. They assume they understand
what users need without getting direct feedback. To encourage this interaction,
users should sign off on key deliverables presented at meetings.
Deliver something to project users and sponsors on a regular basis. If it is some
sort of hardware or software, make sure it works first.
Do not promise to deliver what cannot be delivered in a particular time frame.
Make sure the project schedule allows enough time to produce the
deliverables.
Co-locate userswith the developers. People often get to know each other better by
being in close proximity. If the users cannot be physicallymoved to be near developers
during the entire project, they could set aside certain days for co-location.
Suggestions for Reducing Incomplete and Changing Requirements
Some requirement changes are expected on information technology projects, but many projects
have too many changes to their requirements, especially during later stages of the project
life cycle when it is more difficult to implement them. The following are suggestions
for improving the requirements process:
200
Chapter 5
Develop and follow a requirements management process that includes procedures
for initial requirements determination. (See the Suggested Readings on
the companion Web site by Wiegers and Robertson for detailed information
on managing requirements.)
Employ techniques such as prototyping, use case modeling, and Joint Application
Design to understand user requirements thoroughly. Prototyping involves
developing a working replica of the system or some aspect of the system. These
working replicas may be throwaways or an incremental component of the deliverable
system. Prototyping is an effective tool for gaining an understanding of
requirements, determining the feasibility of requirements, and resolving user
interface uncertainties. Use case modeling is a process for identifying and
modeling business events, who initiated them, and how the system should
respond to them. It is an effective tool for understanding requirements for
information systems. Joint Application Design (JAD) uses highly organized
and intensive workshops to bring together project stakeholders the sponsor,
users, business analysts, programmers, and so on to jointly define and design
information systems. These techniques also help users become more active in
defining system requirements.
Put all requirements in writing and keep them current and readily available.
Several tools are available to automate this function. For example, a type of
software called a requirements management tool aids in capturing and maintaining
requirements information, provides immediate access to the information,
and assists in establishing necessary relationships between requirements
and information created by other tools.
Create a requirements management database for documenting and controlling
requirements. Computer Aided Software Engineering (CASE) tools or
other technologies can assist in maintaining a repository for project data.
A CASE tool s database can also be used to document and control
requirements.
Provide adequate testing to verify that the project s products perform as
expected. Conduct testing throughout the project life cycle. Chapter 8, Project
Quality Management, includes more information on testing.
Use a process for reviewing requested requirements changes from a systems
perspective. For example, ensure that project scope changes include associated
cost and schedule changes. Require approval by appropriate stakeholders. It is
crucial for the project manager to lead the team in their focus on achieving
approved scope goals and not get side-tracked into doing additional work. For
example, in his book, Alpha Project Managers, Andy Crowe tried to uncover
what the best or alpha project managers do differently from other project
managers. One of these alpha project managers explained how he learned an
important lesson about scope control:
Toward the end of some projects I ve worked on, the managers
made their teams work these really long hours. After the second
or third time this happened, I just assumed that this was the way
things worked. Then I got to work with a manager who planned
201
Project Scope Management
everything out really well and ran the team at a good pace the
whole time, and we kept on schedule. When the customer found
out that things were on schedule, he kept trying to increase the
scope, but we had a good manager this time, and she wouldn t let
him do it without adjusting the baselines. That was the first time
I was on a project that finished everything on time and on budget,
and I was amazed at how easy she made it look. 11
Emphasize completion dates. For example, a project manager at Farmland
Industries, Inc. in Kansas City, Missouri, kept her 15-month, $7 million integrated
supply-chain project on track by setting the project deadline. She says,
May 1 was the drop-dead date, and everything else was backed into it. Users
would come to us and say they wanted something, and we d ask them what they
wanted to give up to get it. Sticking to the date is how we managed
scope creep. 12
Allocate resources specifically for handling change requests. For example, Peeter
Kivestu and his ResNet team at Northwest Airlines knew that users would request
enhancements to the reservations system they were developing. They provided
a special function key on the ResNet screen for users to submit their requests,
and the project included three full-time programmers to handle these requests.
Users made over 11,000 enhancement requests. The managers who sponsored
the four main software applications had to prioritize the software enhancement
requests and decide as a group what changes to approve. The three programmers
then implemented as many items as they could, in priority order, given the time
they had. Although they only implemented 38 percent of the requested enhancements,
they were the most important ones, and the users were very satisfied with
the system and process. (You can find a detailed description of the ResNet project
on the companion Web site for this text.)
U S I N G S O F TWA R E T O A S S I S T I N P R O J E C T
S C O P E M A N A G E M E N T
Project managers and their teams can use several types of software to assist in project scope
management. As shown in several of the figures and tables in this chapter, you can use word
processing software to create scope-related documents, and most people use spreadsheet
or presentation software to develop various charts, graphs, and matrixes related to scope
management. Mind-mapping software can be useful in developing a WBS. Project stakeholders
also transmit project scope management information using various types of communication
software such as e-mail and assorted Web-based applications.
Project management software helps you develop a WBS, which serves as a basis for
creating Gantt charts, assigning resources, allocating costs, and so on. You can also use the
templates that come with various project management software products to help you create
a WBS for your project. (See the section on project scope management in Appendix A for
detailed information on using Project 2007 and the companion Web site for information
on templates related to project scope management.)
202
Chapter 5
You can also use many types of specialized software to assist in project scope management.
Many information technology projects use special software for requirements management,
prototyping, modeling, and other scope-related work. Because scope is such a crucial
part of project management, there are many software products available to assist in managing
project scope.
Project scope management is very important, especially on information technology projects.
After selecting projects, organizations must collect the requirements and define the
scope of the work, break down the work into manageable pieces, verify the scope
with project stakeholders, and manage changes to project scope. Using the basic project
management concepts, tools, and techniques discussed in this chapter can help you
successfully manage project scope.
C A S E WR A P - U P
Kim Nguyen reviewed guidelines for creating WBSs provided by her company and other
sources. She had a meeting with the three team leaders for her project to get their input
on how to proceed. They reviewed several sample documents and decided to have major
groupings for their project based on updating the inventory database, acquiring the necessary
hardware and software, installing the hardware and software, and performing project
management. After they decided on a basic approach, Kim led a meeting with the entire
project team of 12 people, with some attending virtually. She reviewed the project charter
and stakeholder register, described the basic approach they would use to collect requirements
and define the project scope, and reviewed sample WBSs. Kim opened the floor for
questions, which she answered confidently. She then let each team leader work with his
or her people to start writing the detailed scope statement and their sections of the WBS
and WBS dictionary. Everyone participated in the meeting, sharing their individual expertise
and openly asking questions. Kim could see that the project was off to a good start.
203
Project Scope Management
Chapter Summary
Project scope management includes the processes required to ensure that the project addresses
all the work required, and only the work required, to complete the project successfully. The main
processes include collecting requirements, defining scope, creating the WBS, verifying scope, and
controlling scope.
The first step in project scope management is collecting requirements, a crucial part of
many IT projects. It is important to review the project charter and meet with key stakeholders
listed in the stakeholder register when collecting requirements. The main outputs of this process
are requirements documentation, a requirements management plan, and a requirements traceability
matrix.
A project scope statement is created in the scope definition process. This document often
includes a product scope description, product user acceptance criteria, detailed information on all
project deliverables, and information on project boundaries, constraints, and assumptions. There
are often several versions of the project scope statement to keep scope information detailed and
up-to-date.
A work breakdown structure (WBS) is a deliverable-oriented grouping of the work involved
in a project that defines the total scope of the project. The WBS forms the basis for planning and
managing project schedules, costs, resources, and changes. You cannot use project management
software without first creating a good WBS. A WBS dictionary is a document that describes
detailed information about each WBS item. A good WBS is often difficult to create because of the
complexity of the project. There are several approaches for developing a WBS, including using
guidelines, the analogy approach, the top-down approach, the bottom-up approach, and mind
mapping.
Verifying scope involves formal acceptance of the project scope by the stakeholders. Controlling
scope involves controlling changes to the project scope.
Poor project scope management is one of the key reasons projects fail. For information
technology projects, it is important for good project scope management to have strong user
involvement, a clear statement of requirements, and a process for managing scope
changes.
There are many software products available to assist in project scope management. The
WBS is a key concept in properly using project management software since it provides the basis
for entering tasks.
Key Terms
analogy approach — creating a WBS by using a similar project's WBS as a starting point
bottom-up approach — creating a WBS by having team members identify as many specific
tasks related to the project as possible and then grouping them into higher level categories
decomposition — subdividing project deliverables into smaller pieces
deliverable — a product, such as a report or segment of software code, produced as part of a
project
Joint Application Design (JAD)— using highly organized and intensive workshops to bring
together project stakeholders the sponsor, users, business analysts, programmers, and so
on to jointly define and design information systems
project scope management — the processes involved in defining and controlling what work is
or is not included in a project
project scope statement — a document that includes, at a minimum, a description of the
project, including its overall objectives and justification, detailed descriptions of all project
deliverables, and the characteristics and requirements of products and services produced
as part of the project
prototyping — developing a working replica of the system or some aspect of the system to help
define user requirements
requirement— a condition or capability that must be met or possessed by a system, product,
service, result, or component to satisfy a contract, standard, specification, or other formal
document
requirements management plan — a plan that describes how project requirements will be
analyzed, documented, and managed
requirements traceability matrix (RTM)— a table that lists requirements, various attributes of
each requirement, and the status of the requirements to ensure that all requirements are
addressed
scope — all the work involved in creating the products of the project and the processes used to
create them
scope baseline — the approved project scope statement and its associated WBS and WBS
dictionary
scope creep — the tendency for project scope to keep getting bigger
top-down approach — creating a WBS by starting with the largest items of the project and
breaking them into their subordinate items
use case modeling — a process for identifying and modeling business events, who initiated
them, and how the system should respond to them
variance — the difference between planned and actual performance
WBS dictionary — a document that describes detailed information about each WBS item
work breakdown structure (WBS) — a deliverable-oriented grouping of the work involved in a
project that defines the total scope of the project
work package — a task at the lowest level of the WBS
Scope planning 
Scope is the defined features and functions of a product, or the scope of work needed to finish a project. There are two ways to look at a project scope: 
• Artifact-based scope: for instance, a product composes of three modules. Once the three modules are delivered, the scope of the project is fully covered 
• Task-based scope: for instance, a project includes three activities that need to be complete. 

Correspondingly, there are two ways of defining a work breakdown structure for a project. A work breakdown structure (WBS)1 is defined as a hierarchical decomposition of the total scope of work to be carried out by the project team to accomplish the project objectives and create the required deliverables (PMBOOK 2013). WBS provides the basis for planning and managing project schedules, costs, resources, and changes (Schwalbe, 2019, p.213) There are several approaches for developing a WBS, including using guidelines, the analogy approach, the top-down approach, the bottom-up approach, and mind mapping (Schwalbe, 2019, p.233). 
1 https://en.wikipedia.org/wiki/Work_breakdown_structure 28 

Figure 6: An example of a task-based WBS 
Figure 7: An example of WBS for a software development project 
Not every breakdown of project deliverable can be classified as a WBS. WBS has certain characteristics: 
• Hierarchy: The WBS is hierarchical in nature. Each “child” level exists in a strict hierarchical relationship with the parent level. The sum of all the child elements should give you the parent element. 
• 100% rule: Every level of decomposition must make up 100% of the parent level. It should also have at least two child elements. 
• Mutually exclusive: All elements at a particular level in a WBS must be mutually exclusive. There must be no overlap in either their deliverables or their work. This is meant to reduce miscommunication and duplicate work. 
• Outcome-focused: The WBS must focus on the result of work, i.e. deliverables, rather than the activities necessary to get there. Every element should be described via nouns, not verbs. This is a big source of confusion for beginners to WBS. 

During many years of teaching the course, we observe common mistakes when students learn to make WBSs. You should consider the following as a check-list to make sure your WBSs do not picture this: 
• This is not a WBS: it is quite typical that students creating a website map instead of a WBS when planning for a web development project. There is also a confusion between product architecture with a artifact-based WBS. 
• Mix of WBS types: we recommend students to choose between artifact-based or task-based WBS, but not mixing both of them. It has been observed that students creating some branches of their WBS with a hierarchy of artifacts, while some other branches with a hierarchy of tasks. It is difficult to do time planning, task assignment when referring to this WBS. 
• Violation of 100% rule: most of first attempt creating WBS by students violate the 100% rules. For instance, when thinking about the tasks they need to perform, the students 
29 


often forget about project planning and management. In fact, they spend a significant amount of time for these tasks. Or students also spend a lot of time for learning new technologies. But when they think about the structure of their products, they do not make a room to include the learning activity in the WBS. Consequently, hundreds of team working hours are not reflected in their WBS, and in their time plan. 
• Violation of the mutual exclusive rule: there are WBS with overlapping nodes. For instance, one put usability testing as a part of the Testing node, as well as a part of Project deployment node. 
• Right level of details: some WBSs have only one level down, while some others have four, five levels down. Not every node needs to be broken down to the same number of levels. However, the level of details should be determined to keep the balance between the overview of the project as well as the detail of the tasks. 
• Numbering WBS’s nodes: it is a common mistake that students do not numbering their WBS. After creation of the work breakdown structure, levels should be numbered for ease of location. For example, a project is divided into 2 major deliverables and these are numbered as 1 and 2 respectively. Then, work packages under each major deliverable are numbered as 1.1, 1.2 etc. for major deliverable 1 and 2.1, 2.2 etc. for major deliverable 2. 
• Forget to update WBS: as the knowledge about the project evolves, there is a need to update your WBS to reflect correctly the current scope of the project. Maintaining an accurate version of WBS will provide a consistent reference when discussing, assigning tasks and to update time and project plans. 


